<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>发卡</title>
  
  <subtitle>2019</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-22T11:47:53.416Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>miiiss</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫入门学习</title>
    <link href="http://example.com/2022/07/22/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/22/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-22T11:46:46.000Z</published>
    <updated>2022-07-22T11:47:53.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>真正的成长，应该是注重健康的</p><p>爬虫一直以来，被人们以为是一项不尊重知识产权的技术，但是，就技术层面以来，他只是提供一种技术用来爬取结构化数据，这种数据可用于各种有用的应用程序，以及数据挖掘，信息处理或历史存档。因此，可以提供一种说法，就是技术无罪，我们可以通过此项技术提高生产力，产生更多有力的工具及资料，因此爬虫技术应该重新认识。  </p><blockquote><p>scrapy：是一个应用程序框架，用于对网站进行爬行和提取结构化数据，这些结构化数据可用于各种有用的应用程序，如数据挖掘、信息处理或历史存档。  </p></blockquote><hr><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="分析页面结构"><a href="#分析页面结构" class="headerlink" title="分析页面结构"></a>分析页面结构</h2><p><a href="http://quotes.toscrape.com/%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E7%BB%83%E4%B9%A0%E7%88%AC%E8%99%AB%E7%9A%84%E7%BD%91%E7%AB%99">http://quotes.toscrape.com/，是一个可以练习爬虫的网站</a><br><img src="https://img-blog.csdnimg.cn/20200401164052584.png" alt="爬虫小项目"><br>这是一个极为简单的页面，每个页面有十个class为quote的小卡片里面包含text，auther，tag。<br>每个页面有个下一页的按钮。 </p><p>url：<a href="http://quotes.toscrape.com/">http://quotes.toscrape.com/</a><br>由于结构过于繁琐，如果有点html结构基础，是可以判断整个页面的结构分布的，因此，直接开始。<br>每个quote是由三部分组成，文本，作者，标签。<br>具体的代码：    </p><pre><code>  import scrapy      class QuotesSpider(scrapy.Spider):      name = &#39;quotes&#39;     start_urls = [       &#39;http://quotes.toscrape.com/tag/humor/&#39;,    ]    def parse(self, response):    for quote in response.css(&#39;div.quote&#39;):        yield &#123;            &#39;author&#39;: quote.xpath(&#39;span/small/text()&#39;).get(),            &#39;text&#39;: quote.css(&#39;span.text::text&#39;).get(),        &#125;    next_page = response.css(&#39;li.next a::attr(&quot;href&quot;)&#39;).get()    if next_page is not None:        yield response.follow(next_page, self.parse)</code></pre><p>妈的 &gt;_&lt; 好难啊  </p><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><blockquote><p>def parse(self, response):</p></blockquote><hr><p>这个 parse() 方法通常解析response，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">&#x27;div.quote&#x27;</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: quote.xpath(<span class="string">&#x27;span/small/text()&#x27;</span>).get(),</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: quote.css(<span class="string">&#x27;span.text::text&#x27;</span>).get(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next_page = response.css(<span class="string">&#x27;li.next a::attr(&quot;href&quot;)&#x27;</span>).get()</span><br><span class="line">    <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(next_page, self.parse)</span><br><span class="line">```  </span><br><span class="line">使用CSS选择器循环 div.quote 元素，然后使用css选择器或者xpath生成一个包含 quote的作者、文本的列表  </span><br><span class="line">css选择器的使用无缝对接css中我们对选择器的认知</span><br><span class="line">xpath是官方推荐我们使用的</span><br><span class="line">查找到下一页的链接，并使用它继续调度 parse() 方法</span><br><span class="line"><span class="comment">## scrapy spider  </span></span><br><span class="line">&gt;scrapy startproject xxx</span><br><span class="line">---</span><br><span class="line">实现scrapy spider</span><br><span class="line"><span class="comment">### 第一步 创建一个新的scrapy项目  </span></span><br></pre></td></tr></table></figure><p>scrapy startproject xxx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 第二步 定义继承spider的类并定义初始请求  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class QuotesSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;quotes&quot;</span><br><span class="line">    start_urls = [</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/1/&#x27;,</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/2/&#x27;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        page = response.url.split(&quot;/&quot;)[-2] #根据上面的链接提取分页,如：/page/1/，提取到的就是：1</span><br><span class="line">        filename = &#x27;quotes-%s.html&#x27; % page #拼接文件名，如果是第一页，最终文件名便是：newpage-1.html</span><br><span class="line">        with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(&#x27;Saved file %s&#x27; % filename)</span><br></pre></td></tr></table></figure><p>还要定义属性和方法</p><p>name ：标识Spider。它在一个项目中必须是唯一的，也就是说，不能为不同的Spider设置相同的名称。</p><p>start_urls：具有URL列表的类属性</p><p>parse() ：将被调用来处理这些URL的每个请求。parse() 是Scrapy的默认回调方法，对没有显式分配回调的请求调用该方法。</p><p>parse() 方法通常解析响应，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求。  </p><p><em><strong>scrapy crawl quotes</strong></em><br>妈的，学会了，不想写了<del>_</del>。  </p><h3 id="scarpy-shell"><a href="#scarpy-shell" class="headerlink" title="scarpy shell"></a>scarpy shell</h3><p>终端输入：</p><blockquote><p>scrapy shell url  </p></blockquote><p>response.css()<br>response.css(‘xxx’) 返回的是一个类似列表的对象：SelectorList，<br>data中存储的是提取到的标签，<br>xpath中存储的XPath表达式，实际上CSS选择器是在后台转换为XPath表达式的<br>允许你进一步的细化选择和提取数据<br>response.css(‘xxx::text’) 与上面方法不同之处在于，data中存储的是提取到的标签的文本<br>response.css(‘xxx’).getall()、response.css(‘xxx::text’).getall()<br>getall() 方法，返回的是一个列表，<br>列表中的值是 SelectorList 中的 data 值<br>一般而言，选择器返回的结果不止一个，getall() 方法 提取全部内容  </p><p>response.xpath这个不写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>quote = response.css(<span class="string">&quot;div.quote&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = quote.css(<span class="string">&quot;span.text::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">&#x27;“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author = quote.css(<span class="string">&quot;small.author::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author</span><br><span class="line"><span class="string">&#x27;Albert Einstein&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags = quote.css(<span class="string">&quot;div.tags a.tag::text&quot;</span>).getall()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags</span><br><span class="line">[<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;deep-thoughts&#x27;</span>, <span class="string">&#x27;thinking&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="存取json文件"><a href="#存取json文件" class="headerlink" title="存取json文件"></a>存取json文件</h3><p>在项目顶层目录下输入scrapy crawl quotes -o quotes.json</p><p>Scrapy 会生成quotes.json文件，并将爬取到的数据放到quotes.json文件中</p><h3 id="具体栗子"><a href="#具体栗子" class="headerlink" title="具体栗子"></a>具体栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;author&#x27;</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        author_page_links = response.css(<span class="string">&#x27;.author + a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(author_page_links, self.parse_author)</span><br><span class="line"></span><br><span class="line">        pagination_links = response.css(<span class="string">&#x27;li.next a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(pagination_links, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_author</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">extract_with_css</span>(<span class="params">query</span>):</span><br><span class="line">            <span class="keyword">return</span> response.css(query).get(default=<span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: extract_with_css(<span class="string">&#x27;h3.author-title::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthdate&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-date::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthlocation&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-location::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;bio&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-description::text&#x27;</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就写这么多吧。<br>本文参考CSDN博主索儿呀，索儿老师整理十分仔细，我写这个是为了记录学习爬虫的相关经历，如有冒犯，我会苏珊&gt;__&lt;<br><em><strong><a href="https://zhangguohao.blog.csdn.net/article/details/105245153">https://zhangguohao.blog.csdn.net/article/details/105245153</a></strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于ajax的使用说明</title>
    <link href="http://example.com/2022/07/17/%E5%85%B3%E4%BA%8Eajax%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2022/07/17/%E5%85%B3%E4%BA%8Eajax%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-17T07:43:22.000Z</published>
    <updated>2022-07-17T09:56:51.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天看关于ajax技术，这种技术本身是不难的，但是由于技术粗糙，好久没练过了，导致项目不足够了解，出现了许多问题，也有了整理这个的必要<br>呜呜呜</p><blockquote><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML） AJAX 不是新的编程语言，而是一种使用现有标准的新方法。AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。  </p></blockquote><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><hr><p>接着，开始编写具体的功能。  </p><p>**接着，最操蛋的事情来了，maven的pom.xml一直配置不好，速度奇慢，因此，搜索到了一种方法那就是！利用阿里云的镜像地址，速度飞起！</p><h2 id="打开-x2F-创建-settings-xml"><a href="#打开-x2F-创建-settings-xml" class="headerlink" title="打开&#x2F;创建 settings.xml"></a>打开&#x2F;创建 settings.xml</h2><p><img src="/../img/10.png" alt="这是图片"></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;&lt;mirrors&gt;    &lt;mirror&gt;        &lt;id&gt;alimaven&lt;/id&gt;        &lt;name&gt;aliyun maven&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;uk&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;        &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;CN&lt;/id&gt;        &lt;name&gt;OSChina Central&lt;/name&gt;        &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;nexus&lt;/id&gt;        &lt;name&gt;internal nexus repository&lt;/name&gt;        &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;&lt;/mirrors&gt;</code></pre></settings>  如此，便可以加快相关的部署及下载速度，同时，使用相关的jquery，我使用的是网址，并没有进行相关的maven配置。    <pre><code>&lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; </code></pre><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>具体的设想是设计一个输入框失去焦点的事件，即onblur()事件，对于页面进行局部刷新，实现相关的ajax作用  </p><blockquote><p>用户名<br>    <input type="text" id="txtname" onblur="an()">  </p></blockquote><pre><code>function an()&#123;    //请求将文本框输入的值发给服务器，    // 接受服务器的值    $.ajax(&#123;        url:&quot;$&#123;pageContext.request.contextPath&#125;/ajax/a1&quot;,        data:&#123;&quot;name&quot;:$(&quot;#txtname&quot;).val()&#125;,        success:function (data,status)&#123;            console.log(data)            alert(status)        &#125;    &#125;);&#125;</code></pre><p>然后实现当输入框内容为admin时，控制台显示为true，当输入框为其他数时，则为false。</p><p><img src="/../img/11.png" alt="不为admin时"></p><blockquote><p>Failed to load resource: the server responded with a status of 404 ()此类报错为正常错误，无须担心</p></blockquote><hr><p><img src="/../img/12.png" alt="为admin"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>心理学：人为什么会想要攻击别人？</title>
    <link href="http://example.com/2022/07/13/project/"/>
    <id>http://example.com/2022/07/13/project/</id>
    <published>2022-07-13T13:27:33.000Z</published>
    <updated>2022-07-13T14:15:08.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>为什么别人喜欢在网络上攻击他人，从开始的蔡徐坤篮球，到现在的易烊千玺，虽然我也不停的伤害别人，但是就个人至群体，以现象推出人性。<br><img src="/../img/1.png" alt="1"></p><h1 id="伤害别人无疑是丢人的"><a href="#伤害别人无疑是丢人的" class="headerlink" title="伤害别人无疑是丢人的"></a>伤害别人无疑是丢人的</h1><p>我们把攻击行为定义为意图伤害他人的身体行为或者言语行为。</p><p>这一定义排除了车祸、牙科治疗和人行道上的碰撞，但包括打耳光，当面侮辱，甚至说风凉话。该定义涵盖了两种不同的攻击行为。</p><p>当动物发怒时，它们在展示典型的社会性攻击行为；而当掠食者潜行在猎物之后时，它们表现的是静息的攻击行为。社会性和静息攻击行为分属不同的脑区。</p><h2 id="心理学将其攻击行为设为两种"><a href="#心理学将其攻击行为设为两种" class="headerlink" title="心理学将其攻击行为设为两种"></a>心理学将其攻击行为设为两种</h2><p><img src="/../img/2.png" alt="2"></p><h3 id="敌意性"><a href="#敌意性" class="headerlink" title="敌意性"></a>敌意性</h3><p>敌意性攻击行为由愤怒引起，以伤害为目的。</p><p>工具性攻击行为只是把伤害作为达到其他目的的一种手段。</p><p>大多数恐怖活动属于工具性攻击，谋杀大多是敌意性的。关于攻击行为的三种主要理论</p><p>与弗洛伊德和洛伦兹关系密切的本能观点认为攻击性的能量会在体内不断积累，就像水在大坝后积聚一样。</p><p>虽然这种观点很少有直接证据的支持，但攻击行为确实受到遗传、血液化学成分和大脑等生物学因素的影响。<br><img src="/../img/3.png" alt="3"></p><h3 id="挫折感"><a href="#挫折感" class="headerlink" title="挫折感"></a>挫折感</h3><p>那是一个暖和的夜晚，在两个小时的认真学习之后，你觉得又累又渴，于是你向朋友借了一些零钱，走向最近的一个自动售货机。你扫码购买一瓶饮料，迫不及待地想要喝一口冰凉爽口的可乐。</p><p>但是，当你按下选择的按钮时，售货机却完全没有反应。你又按了一次，然后按下了把钱退出的按钮，机器仍然毫无动静。你用力地敲打着按钮，然后用拳头捶它们。最后你晃动、敲打售货机，可是没反应。你两手空空非常生气地摔门回了寝室。此时，你的室友是不是特别小心的对待你呢？那时的你是否更容易说出一些伤人的话语，甚至做出一些伤害性的事情呢？</p><p>“挫折总会导致某种形式的攻击行为。”</p><p>这里的挫折指的是，任何阻碍我们实现目标的事物(比如那个出现故障的自动售货机)。</p><p>当我们达到一个目标的动机非常强烈，当我们预期得到满意的结果，却在行动过程中遇到障碍时，挫折便产生了。</p><p>攻击的能量并非直接朝挫折源释放。我们学会克制直接的报复，特别当别人会对这种行为表示反对或者进行惩罚时；</p><p>相反，我们会把我们的敌意转移到一些安全的目标上。</p><p>一则古老的故事为“转移”做了很好的诠释：</p><p>一个被老板羞辱的男人回家以后大声斥责他的妻子，妻子只好向儿子咆哮，儿子只能踢狗解气，而狗则把来送信的邮递员咬了一口。</p><p>在实验情境和现实生活中，当新的目标与挫折源有相似之处，并且稍稍刺激了攻击能量的释放时，攻击的转移最容易发生。</p><p>后续研究发现，“相对剥夺”也会造成挫折。</p><p>当我们把自己和他人进行比较时，我们的挫折感就会变得较为复杂。</p><p>工人的幸福感取决于和同一条工作线上其他人相比他们获得的报酬是否公平。</p><p>提高城市警察的工资水平虽然可以暂时提高他们的士气，却可能同时降低该市消防员的士气。</p><p>这种感觉称为相对剥夺。它可以预测少数人群体在感觉到不平等待遇时会做出什么样的反应。</p><p>相对剥夺同样可以解释，为什么在贫富差距大的国家和社会里，人们的幸福感较低而犯罪率较高。</p><p>在高速现代化的国家里，随着城市化程度和人们的文化水平的提高。他们对物质生活的可能的前景越来越敏感。但富裕群体通常只能较慢地扩展。</p><p>因此，人们的期望与实际所得之间的差距越来越大，这使得他们挫折感变得更为强烈。一旦人们的期望超过了现实生活，挫折和政治攻击行为也依然会逐步增加。</p><p>第三，社会学习理论认为我们的攻击行为是习得的。通过亲身经历和观察别人的成功，我们会习得攻击行为的好处。</p><p>社会学习使家庭、亚文化和大众媒体都能对攻击行为产生重要的影响。</p><p>心理学：在什么情况下人会有暴力？如何减少攻击行为？<br><img src="/../img/4.png" alt="4"></p><h2 id="攻击行为理论"><a href="#攻击行为理论" class="headerlink" title="攻击行为理论"></a>攻击行为理论</h2><blockquote><p>攻击行为（aggression）：意图伤害他人的身体行为或者言语行为。敌意性攻击行为（hostile aggression）：由愤怒引起，以伤害为目的。（如：谋杀）  </p></blockquote><blockquote><p>工具性攻击行为（instrumental aggression）：只是把伤害作为达到其他目的的一种手段。（如：战争、恐怖活动等）</p></blockquote><p>关于攻击行为有三种主要理论。与弗洛伊德和洛伦兹关系密切的本能观点认为攻击性的能量会在体内不断积累，就像水在大坝后集聚一样。虽然这种观点很少有直接证据的支持，但攻击行为确实受到遗传、血液化学成分和大脑等生物学因素的影响。</p><p>【结果发现：未受过虐待的杀人犯的前额叶激活水平比正常人低14%，反社会者的前额叶则比正常人小15%，而前额叶被认为是对于攻击性行为有关的脑区进行紧急抑制的。</p><p>遗传因素影响神经系统对暴力线索的敏感性。在灵长类动物和人类中，攻击性天然有着较大的多样性。我们的气质（即我们的反应性和反应强度）部分是与生俱来的，同时也受交感神经系统反应性的影响。</p><p>攻击行为是由一种能够改变神经递质平衡的基因和童年时期的受虐待经历共同决定的。攻击性和反社会行为并非单纯地只受“不良”基因或是“不良”环境的影响；相反，基因会使某些儿童对虐待更敏感，反应更强烈。先天和后天因素是互相影响的。</p><p>血液中的化学成分同样可以影响神经系统对攻击性刺激的敏感性。酒精可以降低人们的自我觉知和考虑后果的能力，进而增加暴力行为发生的可能。酒精使人们的个性弱化，降低我们的抑制能力。暴力行为与雄性激素即睾丸激素也有关系：在正常的青少年和成年人中，那些睾丸激素水平高的人更容易出现不良行为，使用致麻醉品以及对挑衅产生攻击性回应。</p><p>暴力行为另一个常见的元凶是神经递质5-羟色胺的缺乏，在控制冲动的额叶区有许多接收器。社会经济地位比较低的人5-羟色胺水平往往也比较低。进化心理学家认为，这也许是一种自然的反应，这种状态使他们敢于承担风险去增进他们的利益和地位。】</p><p>第二种观点认为是挫折产生了愤怒和敌意，如果存在攻击性的线索，这种愤怒就可能激起攻击行为。挫折感不仅来自剥夺本身，还来自期望和现实之间的差距，这称之为相对剥夺（relative deprivation）。</p><p>社会学习理论认为我们的攻击行为是习得的。通过亲身经历和观察别人的成功，我们会习得攻击行为的好处。社会学习使家庭、亚文化和大众媒体都能对攻击行为产生重要的影响。<br><img src="/../img/5.png" alt="5"></p><h2 id="如何减少攻击"><a href="#如何减少攻击" class="headerlink" title="如何减少攻击"></a>如何减少攻击</h2><p>与宣泄假设相反，发泄攻击更多地引发攻击的产生，而非减少进一步的攻击。</p><p>社会学习观点建议通过消除引发攻击的因素来控制它——通过减少令人厌恶的刺激，奖励和塑造非攻击行为，和产生于攻击行为不一致的反应。<br>总而言之，归结下来只有两点..</p><p><em>咳咳，不是这两点..,是以下的两个方面</em></p><p><strong>弘扬社会正气，召唤公共良序</strong> </p><p><strong>深入了解事实，确定当前自己的切身需求以及个人能力，不做超乎能力范围之类的事，同时，做人应该具备相当的觉悟，放弃对对立事情的所有幻想。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>demo</title>
    <link href="http://example.com/2022/07/12/demo/"/>
    <id>http://example.com/2022/07/12/demo/</id>
    <published>2022-07-12T09:05:23.000Z</published>
    <updated>2022-07-12T09:21:27.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>策为人，美姿颜，好笑语，性阔达听受，善于用人，是以士民见者，莫不尽心，乐为致死。策时年少，虽有位号，而士民皆呼为孙郎。百姓闻孙郎至，皆失魂魄。 英气杰济，猛锐冠世，览奇取异，志陵中夏，轻佻果躁 。</p><h2 id="孙策"><a href="#孙策" class="headerlink" title="孙策"></a>孙策</h2><h3 id="曹操对孙策的评价"><a href="#曹操对孙策的评价" class="headerlink" title="曹操对孙策的评价"></a>曹操对孙策的评价</h3><p>由于本人最近沉迷三国演义，在网上搜集了相当多的文献，尤其本人对孙策，孙伯符极为敬仰，因此，创建此篇帖子。<br>曹操对孙策有两次评价，一次在与刘备的青梅煮酒论英雄中谈及，当时刘备对孙策极为推崇，认为他是尽得六军十八州，是为当世之豪杰，然曹操却认为：孙策藉父之名，非英雄也</p><p>然官渡之战之前，却大为改观:猘儿，谓难与争锋。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>demo</title>
    <link href="http://example.com/2022/07/12/%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2022/07/12/%E7%88%AC%E8%99%AB/</id>
    <published>2022-07-12T09:05:23.000Z</published>
    <updated>2022-07-22T11:43:59.400Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>玩一玩爬虫咯</p><p>爬虫一直以来，被人们以为是一项不尊重知识产权的技术，但是，就技术层面以来，他只是提供一种技术用来爬取结构化数据，这种数据可用于各种有用的应用程序，以及数据挖掘，信息处理或历史存档。因此，可以提供一种说法，就是技术无罪，我们可以通过此项技术提高生产力，产生更多有力的工具及资料，因此爬虫技术应该重新认识。  </p><blockquote><p>scrapy：是一个应用程序框架，用于对网站进行爬行和提取结构化数据，这些结构化数据可用于各种有用的应用程序，如数据挖掘、信息处理或历史存档。  </p></blockquote><hr><h1 id="入门爬虫"><a href="#入门爬虫" class="headerlink" title="入门爬虫"></a>入门爬虫</h1><h2 id="分析页面结构"><a href="#分析页面结构" class="headerlink" title="分析页面结构"></a>分析页面结构</h2><p><a href="http://quotes.toscrape.com/%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E7%BB%83%E4%B9%A0%E7%88%AC%E8%99%AB%E7%9A%84%E7%BD%91%E7%AB%99">http://quotes.toscrape.com/，是一个可以练习爬虫的网站</a><br><img src="https://img-blog.csdnimg.cn/20200401164052584.png" alt="爬虫小项目"><br>这是一个极为简单的页面，每个页面有十个class为quote的小卡片里面包含text，auther，tag。<br>每个页面有个下一页的按钮。 </p><p>url：<a href="http://quotes.toscrape.com/">http://quotes.toscrape.com/</a><br>由于结构过于繁琐，如果有点html结构基础，是可以判断整个页面的结构分布的，因此，直接开始。<br>每个quote是由三部分组成，文本，作者，标签。<br>具体的代码：    </p><pre><code>  import scrapy      class QuotesSpider(scrapy.Spider):      name = &#39;quotes&#39;     start_urls = [       &#39;http://quotes.toscrape.com/tag/humor/&#39;,    ]    def parse(self, response):    for quote in response.css(&#39;div.quote&#39;):        yield &#123;            &#39;author&#39;: quote.xpath(&#39;span/small/text()&#39;).get(),            &#39;text&#39;: quote.css(&#39;span.text::text&#39;).get(),        &#125;    next_page = response.css(&#39;li.next a::attr(&quot;href&quot;)&#39;).get()    if next_page is not None:        yield response.follow(next_page, self.parse)</code></pre><p>妈的 &gt;_&lt; 好难啊  </p><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><blockquote><p>def parse(self, response):</p></blockquote><hr><p>这个 parse() 方法通常解析response，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">&#x27;div.quote&#x27;</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: quote.xpath(<span class="string">&#x27;span/small/text()&#x27;</span>).get(),</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: quote.css(<span class="string">&#x27;span.text::text&#x27;</span>).get(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next_page = response.css(<span class="string">&#x27;li.next a::attr(&quot;href&quot;)&#x27;</span>).get()</span><br><span class="line">    <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(next_page, self.parse)</span><br><span class="line">```  </span><br><span class="line">使用CSS选择器循环 div.quote 元素，然后使用css选择器或者xpath生成一个包含 quote的作者、文本的列表  </span><br><span class="line">css选择器的使用无缝对接css中我们对选择器的认知</span><br><span class="line">xpath是官方推荐我们使用的</span><br><span class="line">查找到下一页的链接，并使用它继续调度 parse() 方法</span><br><span class="line"><span class="comment">## scrapy spider  </span></span><br><span class="line">&gt;scrapy startproject xxx</span><br><span class="line">---</span><br><span class="line">实现scrapy spider</span><br><span class="line"><span class="comment">### 第一步 创建一个新的scrapy项目  </span></span><br></pre></td></tr></table></figure><p>scrapy startproject xxx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 第二步 定义继承spider的类并定义初始请求  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class QuotesSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;quotes&quot;</span><br><span class="line">    start_urls = [</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/1/&#x27;,</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/2/&#x27;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        page = response.url.split(&quot;/&quot;)[-2] #根据上面的链接提取分页,如：/page/1/，提取到的就是：1</span><br><span class="line">        filename = &#x27;quotes-%s.html&#x27; % page #拼接文件名，如果是第一页，最终文件名便是：newpage-1.html</span><br><span class="line">        with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(&#x27;Saved file %s&#x27; % filename)</span><br></pre></td></tr></table></figure><p>还要定义属性和方法</p><p>name ：标识Spider。它在一个项目中必须是唯一的，也就是说，不能为不同的Spider设置相同的名称。</p><p>start_urls：具有URL列表的类属性</p><p>parse() ：将被调用来处理这些URL的每个请求。parse() 是Scrapy的默认回调方法，对没有显式分配回调的请求调用该方法。</p><p>parse() 方法通常解析响应，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求。  </p><p><em><strong>scrapy crawl quotes</strong></em><br>妈的，学会了，不想写了<del>_</del>。  </p><h3 id="scarpy-shell"><a href="#scarpy-shell" class="headerlink" title="scarpy shell"></a>scarpy shell</h3><p>终端输入：</p><blockquote><p>scrapy shell url  </p></blockquote><p>response.css()<br>response.css(‘xxx’) 返回的是一个类似列表的对象：SelectorList，<br>data中存储的是提取到的标签，<br>xpath中存储的XPath表达式，实际上CSS选择器是在后台转换为XPath表达式的<br>允许你进一步的细化选择和提取数据<br>response.css(‘xxx::text’) 与上面方法不同之处在于，data中存储的是提取到的标签的文本<br>response.css(‘xxx’).getall()、response.css(‘xxx::text’).getall()<br>getall() 方法，返回的是一个列表，<br>列表中的值是 SelectorList 中的 data 值<br>一般而言，选择器返回的结果不止一个，getall() 方法 提取全部内容  </p><p>response.xpath这个不写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>quote = response.css(<span class="string">&quot;div.quote&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = quote.css(<span class="string">&quot;span.text::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">&#x27;“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author = quote.css(<span class="string">&quot;small.author::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author</span><br><span class="line"><span class="string">&#x27;Albert Einstein&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags = quote.css(<span class="string">&quot;div.tags a.tag::text&quot;</span>).getall()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags</span><br><span class="line">[<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;deep-thoughts&#x27;</span>, <span class="string">&#x27;thinking&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="存取json文件"><a href="#存取json文件" class="headerlink" title="存取json文件"></a>存取json文件</h3><p>在项目顶层目录下输入scrapy crawl quotes -o quotes.json</p><p>Scrapy 会生成quotes.json文件，并将爬取到的数据放到quotes.json文件中</p><h3 id="具体栗子"><a href="#具体栗子" class="headerlink" title="具体栗子"></a>具体栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;author&#x27;</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        author_page_links = response.css(<span class="string">&#x27;.author + a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(author_page_links, self.parse_author)</span><br><span class="line"></span><br><span class="line">        pagination_links = response.css(<span class="string">&#x27;li.next a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(pagination_links, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_author</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">extract_with_css</span>(<span class="params">query</span>):</span><br><span class="line">            <span class="keyword">return</span> response.css(query).get(default=<span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: extract_with_css(<span class="string">&#x27;h3.author-title::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthdate&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-date::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthlocation&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-location::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;bio&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-description::text&#x27;</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就写这么多吧。<br>本文参考CSDN博主索儿呀，索儿老师整理十分仔细，我写这个是为了记录学习爬虫的相关经历，如有冒犯，我会苏珊&gt;__&lt;<br><em><strong><a href="https://zhangguohao.blog.csdn.net/article/details/105245153">https://zhangguohao.blog.csdn.net/article/details/105245153</a></strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>we have a great day</title>
    <link href="http://example.com/2022/07/11/hello-world/"/>
    <id>http://example.com/2022/07/11/hello-world/</id>
    <published>2022-07-11T07:15:32.815Z</published>
    <updated>2022-07-12T03:18:18.660Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
