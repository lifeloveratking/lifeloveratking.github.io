<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林</title>
  
  <subtitle>-de xiaowu</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-17T02:54:59.281Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>miiiss</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring技术详解</title>
    <link href="http://example.com/2023/04/16/spring1/"/>
    <id>http://example.com/2023/04/16/spring1/</id>
    <published>2023-04-16T04:39:15.000Z</published>
    <updated>2023-04-17T02:54:59.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring核心技术详解-一"><a href="#Spring核心技术详解-一" class="headerlink" title="Spring核心技术详解(一)"></a>Spring核心技术详解(一)</h1><p><a href="https://www.zhihu.com/people/tobetopjavaer"><img src="https://picx.zhimg.com/v2-3d74e4bbe6676c63522dbf5e29b0f81a_l.jpg?source=32738c0c" alt="java架构师"></a></p><p><a href="https://www.zhihu.com/people/tobetopjavaer">java架构师</a></p><p>35 人赞同了该文章</p><h2 id="一、Sring简介"><a href="#一、Sring简介" class="headerlink" title="一、Sring简介"></a>一、Sring简介</h2><p>Spring是一个分层的Java SE&#x2F;EE应用一站式的<code>轻量级开源框架</code>。Spring核心是<code>IOC</code>和<code>AOP</code>。 Spring主要优点包括：</p><ul><li><strong>方便解耦，简化开发，通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码造成的程序耦合度高。</strong></li><li><strong>AOP编程的支持，通过Spring提供的AOP功能，方便进行面向切面编程。</strong></li><li><strong>声明式事务的支持，在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</strong></li><li><strong>方便程序的测试，可以用非容器依赖的编程方式进行几乎所有的测试工作。</strong></li><li><strong>方便集成各种优秀框架，Spring提供了对各种优秀框架的直接支持。</strong></li></ul><h2 id="二、Spring体系结构"><a href="#二、Spring体系结构" class="headerlink" title="二、Spring体系结构"></a>二、Spring体系结构</h2><p>如下图所示，整个spring框架按其所属功能可以划分为五个主要模块，这五个模块几乎为企业应用提供了所需的一切，从持久层、业务层到表现层都拥有相应的支持，这就是为什么称Spring是一站式框架的原因。</p><p><img src="https://pic4.zhimg.com/80/v2-9c65f4004a1ed6727faa9f024ce8ba6b_720w.webp" alt="img"></p><h3 id="核心模块-Core-Container"><a href="#核心模块-Core-Container" class="headerlink" title="核心模块(Core Container)"></a>核心模块(Core Container)</h3><p>Spring的核心模块实现了IoC的功能，它将类和类之间的依赖从代码中脱离出来，用配置的方式进行依赖关系描述。由IoC容器负责类的创建，管理，获取等。BeanFactory接口是Spring框架的核心接口，实现了容器很多核心的功能。</p><p>Context模块构建于核心模块之上，扩展了BeanFactory的功能，包括国际化，资源加载，邮件服务，任务调度等多项功能。ApplicationContext是Context模块的核心接口。</p><p>表达式语言(Expression Language)是统一表达式语言(EL)的一个扩展，支持设置和获取对象属性，调用对象方法，操作数组、集合等。使用它可以很方便的通过表达式和Spring IoC容器进行交互。</p><h3 id="AOP模块"><a href="#AOP模块" class="headerlink" title="AOP模块"></a>AOP模块</h3><p>Spring AOP模块提供了满足AOP Alliance规范的实现，还整合了AspectJ这种AOP语言级的框架。通过AOP能降低耦合。</p><h3 id="数据访问集成模块（Data-Access-x2F-Integration-）"><a href="#数据访问集成模块（Data-Access-x2F-Integration-）" class="headerlink" title="数据访问集成模块（Data Access&#x2F;Integration ）"></a>数据访问集成模块（Data Access&#x2F;Integration ）</h3><p>该模块包括了JDBC、ORM、OXM、JMS和事务管理：</p><ul><li>事务模块：该模块用于Spring管理事务，只要是Spring管理对象都能得到Spring管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事务管理。</li><li>JDBC模块：提供了一个JBDC的样例模板，使用这些模板能消除传统冗长的JDBC编码还有必须的事务控制，而且能享受到Spring管理事务的好处。</li><li>ORM模块：提供与流行的“对象-关系”映射框架的无缝集成，包括hibernate、JPA、MyBatis等。而且可以使用Spring事务管理，无需额外控制事务。</li><li>OXM模块：提供了一个对Object&#x2F;XML映射实现，将Java对象映射成XML数据，或者将XML数据映射成java对象，Object&#x2F;XML映射实现包括JAXB、Castor、XMLBeans和XStream。</li><li>JMS模块：用于JMS(Java Messaging Service)，提供一套“消息生产者、消息消费者”模板用于更加简单的使用JMS，JMS用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li></ul><h3 id="Web模块"><a href="#Web模块" class="headerlink" title="Web模块"></a>Web模块</h3><p>该模块建立在ApplicationContext模块之上，提供了Web应用的功能，如文件上传、FreeMarker等。Spring可以整合Struts2等MVC框架。此外，Spring自己提供了MVC框架Spring MVC。</p><h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p>Spring可以用非容器依赖的编程方式进行几乎所有的测试工作，支持JUnit和TestNG等测试框架。</p><h2 id="三、初识Ioc与DI"><a href="#三、初识Ioc与DI" class="headerlink" title="三、初识Ioc与DI"></a>三、初识Ioc与DI</h2><p>我们首先来讲解一下IoC的概念。IoC(控制反转:Inverse of Control)是Spring容器的核心，但是IoC这个概念却比较晦涩，让人不太容易望文生义。</p><h3 id="1、IoC控制反转和DI依赖注入"><a href="#1、IoC控制反转和DI依赖注入" class="headerlink" title="1、IoC控制反转和DI依赖注入"></a>1、IoC控制反转和DI依赖注入</h3><p>传统程序设计中，我们需要使用某个对象的方法，需要先通过new创建一个该对象，我们这时是主动行为；而IoC是我们将创建对象的控制权交给IoC容器，这时是由容器帮忙创建及注入依赖对象，我们的<code>程序被动的接受IoC容器创建的对象</code><br>，控制权反转，所以叫控制反转。</p><p>由于IoC确实不够开门见山，所以提出了DI（依赖注入：Dependency<br>Injection）的概念，即让第三方来实现注入，以移除我们类与需要使用的类之间的依赖关系。总的来说，IoC是目的，DI是手段，创建对象的过程往往意味着依赖的注入。我们为了实现IoC，让生成对象的方式由传统方式(new)<br>反转过来，需要创建相关对象时由IoC容器帮我们注入(DI)。</p><p>简单的说，就是我们类里需要另一个类，只需要让Spring帮我们创建 ，这叫做<code>控制反转</code>；然后Spring帮我们将需要的对象设置到我们的类中，这叫做<code>依赖注入</code>。</p><h3 id="2、常见的几种注入方法"><a href="#2、常见的几种注入方法" class="headerlink" title="2、常见的几种注入方法"></a>2、常见的几种注入方法</h3><ul><li><strong>使用有参构造方法注入</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>使用属性注入</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">     user.setName(<span class="string">&quot;jack&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>使用接口注入</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将调用类所有依赖注入的方法抽取到接口中，调用类通过实现该接口提供相应的注入方法。 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DapIml</span> <span class="keyword">implements</span> <span class="title class_">Dao</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过容器完成依赖关系的注入</strong></p><p>上面的注入方式都需要我们手动的进行注入，如果有一个<code>第三方容器能帮助我们完成类的实例化</code><br>，以及依赖关系的装配，那么我们只需要专注于业务逻辑的开发即可。Spring就是这样的容器，它通过配置文件或注解描述类和类之间的依赖关系，自动完成类的初始化和依赖注入的工作。</p><h3 id="3、Spring的IoC例子"><a href="#3、Spring的IoC例子" class="headerlink" title="3、Spring的IoC例子"></a>3、Spring的IoC例子</h3><p>(1) 创建工程，导入jar包</p><p>这里我们只是做IoC的操作，所以只需要导入核心模块里的jar包，beans、core、context、expression等。因为spring中并没有日志相关的jar包，所以我们还需要导入log4j和commons-logging。</p><p>(2) 创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 创建一个xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置要创建的类  </span></span><br><span class="line">    &lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.cad.domain.User&quot;</span>/&gt;        </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>(4) 进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这只是用来测试的代码，后期不会这么写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        User user=(User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在容器启动时，Spring会根据配置文件的描述信息，自动实例化Bean并完成依赖关系的装配，从容器中即可获得Bean实例，就可以直接使用。Spring为什么仅凭一个简单的配置文件，就能神奇的实例化并配置好程序使用的Bean呢？答案是通过 <code>Java的反射技术</code><br>。</p><h3 id="4、Spring的DI例子"><a href="#4、Spring的DI例子" class="headerlink" title="4、Spring的DI例子"></a>4、Spring的DI例子</h3><p>我们的service层总是用到dao层，以前我们总是在Service层new出dao对象，现在我们使用依赖注入的方式向Service层注入dao层。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserDao</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UserService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    UserDao userdao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserdao</span><span class="params">(UserDao userdao)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userdao=userdao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service.......&quot;</span>);</span><br><span class="line">        userdao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------分割线--------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;userdao&quot;</span> class=<span class="string">&quot;com.cad.domain.UserDao&quot;</span>&gt;&lt;/bean&gt; </span><br><span class="line"><span class="comment">//这样在实例化service的时候，同时装配了dao对象，实现了依赖注入</span></span><br><span class="line">&lt;bean id=<span class="string">&quot;userservice&quot;</span> class=<span class="string">&quot;com.cad.domain.UserService&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//ref为dao的id值</span></span><br><span class="line">    &lt;property name=<span class="string">&quot;userdao&quot;</span> ref=<span class="string">&quot;userdao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="四、Spring资源访问神器——Resource接口"><a href="#四、Spring资源访问神器——Resource接口" class="headerlink" title="四、Spring资源访问神器——Resource接口"></a>四、Spring资源访问神器——Resource接口</h2><p>JDK提供的访问资源的类(如java.NET.URL,File)等并不能很好很方便的满足各种底层资源的访问需求。Spring设计了一个Resource接口，为应用提供了更强的访问底层资源的能力，该接口拥有对应不同资源类型的实现类。</p><h3 id="1、Resource接口的主要方法"><a href="#1、Resource接口的主要方法" class="headerlink" title="1、Resource接口的主要方法"></a>1、Resource接口的主要方法</h3><ul><li>***boolean exists()***：资源是否存在</li><li>***boolean isOpen()***：资源是否打开</li><li>***URL getURL()***：返回对应资源的URL</li><li>***File getFile()***：返回对应的文件对象</li><li>***InputStream getInputStream()***：返回对应资源的输入流</li></ul><p>Resource在Spring框架中起着不可或缺的作用，Spring框架使用Resource装载各种资源，包括配置文件资源，国际化属性资源等。</p><h3 id="2、Resource接口的具体实现类"><a href="#2、Resource接口的具体实现类" class="headerlink" title="2、Resource接口的具体实现类"></a>2、Resource接口的具体实现类</h3><ul><li>***ByteArrayResource***：二进制数组表示的资源</li><li>***ClassPathResource***：类路径下的资源 ，资源以相对于类路径的方式表示</li><li>***FileSystemResource***：文件系统资源，资源以文件系统路径方式表示，如d:&#x2F;a&#x2F;b.txt</li><li>***InputStreamResource***：对应一个InputStream的资源</li><li>***ServletContextResource***：为访问容器上下文中的资源而设计的类。负责以相对于web应用根目录的路径加载资源</li><li>***UrlResource***：封装了java.net.URL。用户能够访问任何可以通过URL表示的资源，如Http资源，Ftp资源等</li></ul><h3 id="3、Spring的资源加载机制"><a href="#3、Spring的资源加载机制" class="headerlink" title="3、Spring的资源加载机制"></a>3、Spring的资源加载机制</h3><p>为了访问不同类型的资源，必须使用相应的Resource实现类，这是比较麻烦的。Spring提供了一个强大的加载资源的机制，仅通过资源地址的特殊标识就可以加载相应的资源。首先，我们了解一下Spring<code>支持哪些资源类型的地址前缀</code>:</p><ul><li>***classpath***：例如classpath:com&#x2F;cad&#x2F;domain&#x2F;bean.xml。从类路径中加载资源</li><li>***file***：例如 file:com&#x2F;cad&#x2F;domain&#x2F;bean.xml.使用UrlResource从文件系统目录中加载资源。</li><li>***http***：&#x2F;&#x2F;<br>例如<a href="https://link.zhihu.com/?target=http://www.baidu.com/resource/bean.xml">http://www.baidu.com/resource/bean.xml</a><br>使用UrlResource从web服务器加载资源</li><li>***ftp***：&#x2F;&#x2F; 例如frp:&#x2F;&#x2F;10.22.10.11&#x2F;bean.xml 使用UrlResource从ftp服务器加载资源</li></ul><p>Spring定义了一套资源加载的接口。ResourceLoader接口仅有一个getResource(String location)<br>的方法，可以根据资源地址加载文件资源。资源地址仅支持带资源类型前缀的地址，不支持Ant风格的资源路径表达式。ResourcePatternResolver扩展ResourceLoader接口，定义新的接口方法getResources(<br>String locationPattern)，该方法支持带资源类型前缀以及Ant风格的资源路径的表达式。PathMatchingResourcePatternResolver是Spring提供的标准实现类。</p><h3 id="4、例子"><a href="#4、例子" class="headerlink" title="4、例子"></a>4、例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ResourceLoader</span> <span class="variable">resloLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> resloLoader.getResource(<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">        System.out.println(res <span class="keyword">instanceof</span> UrlResource); <span class="comment">// true</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(res.getInputStream()));</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((temp = bf.readLine())!= <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-----------------------------\n&quot;</span>);</span><br><span class="line">        res = resloLoader.getResource(<span class="string">&quot;classpath:test.txt&quot;</span>);</span><br><span class="line">        bf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(res.getInputStream()));</span><br><span class="line">        sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((temp = bf.readLine())!= <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-----------------------------\n&quot;</span>);</span><br><span class="line">        res = resloLoader.getResource(<span class="string">&quot;file:C:\\Users\\ricco\\Desktop\\test\\test.txt&quot;</span>);</span><br><span class="line">        bf = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(res.getInputStream()));</span><br><span class="line">        sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        temp = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((temp = bf.readLine())!= <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Spring的Ioc容器详解"><a href="#五、Spring的Ioc容器详解" class="headerlink" title="五、Spring的Ioc容器详解"></a>五、Spring的Ioc容器详解</h2><h3 id="1、BeanFactory"><a href="#1、BeanFactory" class="headerlink" title="1、BeanFactory"></a>1、BeanFactory</h3><p>BeanFactory是一个类工厂，和传统的类工厂不同，传统的类工厂仅负责构造一个类或几个类的实例；而BeanFactory可以创建并管理各种类的对象，Spring称这些被创建和管理的Java对象为Bean。</p><p>BeanFactory是一个接口，Spring为BeanFactory提供了多种实现，最常用的就是XmlBeanFactory。其中，BeanFactory接口最主要的方法就是getBean(String beanName)<br>，该方法从容器中返回指定名称的Bean。此外，BeanFactory接口的功能可以通过实现它的接口进行扩展(比如ApplicationContext)。看下面的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们使用Spring配置文件为User类提供配置信息，然后通过BeanFactory装载配置文件，启动Spring IoC容器。 </span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.cad.domain.User&quot;</span>&gt;&lt;/bean&gt;   </span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"><span class="comment">// 我们通过XmlBeanFactory实现类启动Spring IoC容器 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="comment">//获取配置文件</span></span><br><span class="line">        ResourcePatternResolver  resolver=<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>(); </span><br><span class="line">        Resource rs=resolver.getResource(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载配置文件并启动IoC容器</span></span><br><span class="line">        BeanFactory bf=<span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(rs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从容器中获取Bean对象</span></span><br><span class="line">        User user=(User) bf.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        user.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XmlBeanFactory装载Spring配置文件并启动IoC容器，通过BeanFactory启动IoC容器时，并不会初始化配置文件中定义的Bean，初始化创建动作在第一个调用时。在初始化BeanFactory，必须提供一种日志框架，我们使用Log4J。</p><h3 id="2、ApplicationContext"><a href="#2、ApplicationContext" class="headerlink" title="2、ApplicationContext"></a>2、ApplicationContext</h3><p>ApplicationContext由BeanFactory派生而来，提供了更多面向实际应用的功能。在BeanFactory中，很多功能需要编程方式来实现，而ApplicationContext中可以通过配置的方式来实现。ApplicationContext的主要实现类是<code>ClassPathXmlApplicationContext</code><br>和<code>FileSystemXmlApplicationContext</code>，前者默认从类路径加载配置文件，后者默认从文件系统中加载配置文件，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 和BeanFactory初始化相似，ApplicationContext初始化也很简单</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br></pre></td></tr></table></figure><p>ApplicationContext的初始化和BeanFactory初始化有一个重大的区别，<code>BeanFactory初始化容器时并未初始化Bean，只有第一次访问Bean时才创建；而ApplicationContext则在初始化时就实例化所有的单实例的Bean</code><br>。因此，ApplicationContext的初始化时间会稍长一点。</p><h3 id="3、WebApplicationContext"><a href="#3、WebApplicationContext" class="headerlink" title="3、WebApplicationContext"></a>3、WebApplicationContext</h3><p>WebApplicationContext是专门为Web应用准备的，它允许以相对于Web根目录的路径中加载配置文件完成初始化工作。从WebApplicationContext中可以获取ServletContext的引用，整个WebApplicationContext对象作为属性放置到ServletContext中，以便Web应用环境中可以访问Spring应用上下文。<code>ConfigurableWebApplicationContext</code><br>扩展了WebApplicationContext,允许通过配置方式实例化WebApplicationContext，定义了两个重要方法。</p><ul><li>***setServletContext(ServletContext servletcontext)***：为Spring设置ServletContext</li><li>***setConfigLocation(String[] configLocations)***：设置Spring配置文件地址。</li></ul><p>WebApplicationContext<code>初始化的时机和方式</code><br>是：利用Spring提供的ContextLoaderListener监听器去监听ServletContext对象的创建，当ServletContext对象创建时，创建并初始化WebApplicationContext对象。因此，我们只需要在web.xml配置监听器即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 利用Spring提供的ContextLoaderListener监听器去监听ServletContext对象的创建，并初始化WebApplicationContext对象 --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Context Configuration locations <span class="keyword">for</span> Spring XML <span class="title function_">files</span><span class="params">(默认查找/WEB-INF/applicationContext.xml)</span> --&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br></pre></td></tr></table></figure><h3 id="4、BeanFactory、ApplicationContext和WebApplicationContext的联系与区别"><a href="#4、BeanFactory、ApplicationContext和WebApplicationContext的联系与区别" class="headerlink" title="4、BeanFactory、ApplicationContext和WebApplicationContext的联系与区别"></a>4、BeanFactory、ApplicationContext和WebApplicationContext的联系与区别</h3><p>Spring通过一个配置文件描述Bean与Bean之间的依赖关系，通过Java语言的反射技术能实例化Bean并建立Bean之间的依赖关系。Spring的IoC容器在完成这些底层工作的基础上，还提供了bean实例缓存、生命周期管理、事件发布，资源装载等高级服务。</p><p>BeanFactory是Spring最核心的接口，提供了高级IoC的配置机制。ApplicationContext建立在BeanFactory的基础上，是BeanFactory的子接口，提供了更多面向应用的功能。我们一般称BeanFactory为<code>IoC容器</code><br>，ApplicationContext为<code>应用上下文</code>，也称为<code>Spring容器</code>。WebApplicationContext是专门为<code>Web应用准备</code><br>的，它允许以相对于Web根目录的路径中加载配置文件完成初始化工作，是ApplicationContext接口的子接口。</p><p>BeanFactory是Spring框架的基础，面向Spring本身；ApplicationContext面向使用Spring框架的开发者，几乎所有的应用我们都直接使用ApplicationContext而非底层的BeanFactory；WebApplicationContext是专门用于Web应用。</p><h3 id="5、父子容器"><a href="#5、父子容器" class="headerlink" title="5、父子容器"></a>5、父子容器</h3><p>通过HierarchicalBeanFactory接口，Spring的IoC容器可以建立父子层级关联的体系：<code>子容器可以访问父容器的Bean，父容器不能访问子容器的Bean。</code></p><p>Spring使用父子容器实现了很多功能，比如在Spring MVC中，控制器Bean位于子容器中，业务层和持久层Bean位于父容器中。但即使这样，控制器Bean也可以引用持久层和业务层的Bean，而业务层和持久层就看不到控制器Bean。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring核心技术详解-一&quot;&gt;&lt;a href=&quot;#Spring核心技术详解-一&quot; class=&quot;headerlink&quot; title=&quot;Spring核心技术详解(一)&quot;&gt;&lt;/a&gt;Spring核心技术详解(一)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www</summary>
      
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
    <category term="IOC和DI" scheme="http://example.com/tags/IOC%E5%92%8CDI/"/>
    
    <category term="表单验证" scheme="http://example.com/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>shiro</title>
    <link href="http://example.com/2023/04/16/shrio/"/>
    <id>http://example.com/2023/04/16/shrio/</id>
    <published>2023-04-16T04:39:10.000Z</published>
    <updated>2023-04-17T02:56:22.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h2><h3 id="什么是Shiro"><a href="#什么是Shiro" class="headerlink" title="什么是Shiro?"></a>什么是Shiro?</h3><ul><li>Apache Shiro是一个Java 的<code>安全(权限)框架</code>。</li><li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li><li>Shiro可以完成，<code>认证</code>，<code>授权</code>，<code>加密</code>，<code>会话管理</code>，<code>Web集成</code>，<code>缓存</code>等.</li><li><h2 id="官网-shiro-apache-org-x2F"><a href="#官网-shiro-apache-org-x2F" class="headerlink" title="官网: shiro.apache.org&#x2F;"></a>官网: <a href="https://link.juejin.cn/?target=http://shiro.apache.org/">shiro.apache.org&#x2F;</a></h2></li></ul><p>官方文档十分钟快速入门：<a href="https://link.juejin.cn/?target=http://shiro.apache.org/10-minute-tutorial.html">shiro.apache.org&#x2F;10-minute-t…</a></p><ul><li>下载地址:<a href="https://link.juejin.cn/?target=https://github.com/apache/shiro.git">github.com&#x2F;apache&#x2F;shir…</a></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c3258b9e39b47be9614b0b113055af0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><h3 id="Shiro的三大功能"><a href="#Shiro的三大功能" class="headerlink" title="Shiro的三大功能"></a>Shiro的三大功能</h3><p>Shiro有三大核心组件，即<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code></p><ul><li>Subject: 为<code>认证主体</code>。应用代码直接交互的对象是Subject,Subject代表了当前的用户。包含<code>Principals</code>和<code>Credentials</code>两个信息。</li><li>SecurityManager:为<code>安全管理员</code>。是Shiro架构的核心。与Subject的所有交互都会委托给SecurityManager,<br>Subject相当于是一个门面，而SecurityManager才是真正的执行者。它负责与Shiro 的其他组件进行交互。</li><li>Realm：是<code>一个域</code><br>。充当了Shiro与应用安全数据间的“桥梁”。Shiro从Realm中获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm中获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色、权限，进行验证用户的操作是否能过进行，可以把Realm看成DataSource，即安全数据源。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1df3b80052a40ecb8482475e35e127f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><ul><li><code>Authentication</code>: 身份认证、登录，验证用户是不是拥有相应的身份;</li><li><code>Authorization</code>:授权,即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行什么操作，如:验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限!</li><li><code>Session Manager</code>: 会话管理，即用户登录后就是第-次会话，在没有退出之前，它的所有信息都在会话中;会话可以是普通的JavaSE环境，也可以是Web环境;</li><li><code>Cryptography</code>: 加密,保护数据的安全性，如密码加密存储到数据库中，而不是明文存储;</li><li><code>Web Support</code>: Web支持，可以非常容易的集成到Web环境;</li><li><code>Caching</code>: 缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查,这样可以提高效率</li><li><code>Concurrency</code>: Shiro支持多线程应用的并发验证，即，如在一个线程中开启另一个线程,能把权限自动的传播过去</li><li><code>Testing</code>:提供测试支持;</li><li><code>RunAs</code>:允许一个用户假装为另-一个用户(如果他们允许)的身份进行访问;</li><li><code>Remember Me</code>:记住我，这个是非常常见的功能，即一-次登录后， 下次再来的话不用登录了</li></ul><h3 id="shiro架构（外部）"><a href="#shiro架构（外部）" class="headerlink" title="shiro架构（外部）"></a>shiro架构（外部）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00b0b78d68943feae4aa9832b82bb98~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><p>从外部来看Shiro,即从应用程序角度来观察如何使用shiro完成工作: Subject 用户，SecurityManager管理所有用户 Realm连接数据</p><ul><li><code>subject</code>: 应用代码直接交互的对象是Subject, 也就是说<code>Shiro</code>的对外API核心就是<code>Subject</code>,<br>Subject代表了当前的用户，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject,如网络爬虫，机器人等，与Subject的所有交互都会委托给SecurityManager; Subject其实是一一个门面，<br>SecurityManageer 才是实际的执行者。</li><li><code>SecurityManager</code>: 安全管理器，即所有与安全有关的操作都会与<code>SercurityManager</code>交互,<br>并且它管理着所有的Subject,可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC的DispatcherServlet的角色</li><li><code>Realm</code>: Shiro从Realm获取安全数据 (如用户,角色，权限)，就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较，来确定用户的身份是否合法;也需要从<code>Realm</code><br>得到用户相应的角色、权限，进行验证用户的操作是否能够进行，可以把Realm看DataSource;</li></ul><h3 id="Shiro架构-内部"><a href="#Shiro架构-内部" class="headerlink" title="Shiro架构(内部)"></a>Shiro架构(内部)</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8991ce3120e94c9baccc4aae76666875~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><ul><li><code>Subject</code>: 任何可以与应用交互的用户;</li><li><code>Security Manager</code>:相当于SpringMVC中的<code>DispatcherSerlet</code>; 是Shiro的<code>心脏</code>， 所有具体的交互都通过<code>Security Manager</code>进行控制，它管理者所有的Subject,<br>且负责进行认证,授权，会话，及缓存的管理。</li><li><code>Authenticator</code>:负责<code>Subject</code>认证， 是-一个扩展点，可以自定义实现;可以使用<code>认证策略</code>(Authentication Strategy)，即什么情况下算用户认证通过了;</li><li><code>Authorizer</code>:授权器，即访问控制器，用来决定主体是否有权限进行相应的操作;即控制着用户能访问应用中 的那些功能;</li><li><code>Realm</code>: 可以有-一个或者多个的realm, 可以认为是安全实体数据源，即用于获取安全实体的，可以用JDBC实现，也可以是内存实现等等，由用户提供;所以- -般在应用中都需要实现自己的realm</li><li><code>SessionManager</code>:管理Session生 命周期的组件,而Shiro并不仅仅可以用在Web环境，也可以用在普通的JavaSE环境中</li><li><code>CacheManager</code>: 缓存控制器，来管理如用户，角色，权限等缓存的;因为这些数据基本上很少改变,放到缓存中后可以提高访问的性能;</li><li><code>Cryptography</code>:密码模块，Shiro 提高了一些常见的加密组件用于密码加密， 解密等</li></ul><h2 id="Shiro快速入门"><a href="#Shiro快速入门" class="headerlink" title="Shiro快速入门"></a>Shiro快速入门</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载：GitHub资源</p><p>创建一个普通maven项目springboot-08-shiro，然后删除src目录和没用的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更改增加版本号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>复制 <a href="https://link.juejin.cn/?target=https://github.com/apache/shiro/tree/master/samples/quickstart/src/main/resources">github.com&#x2F;apache&#x2F;shir…</a></p><p>recourse下面的log4j.properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m %n</span><br><span class="line"></span><br><span class="line"># General Apache libraries</span><br><span class="line">log4j.logger.org.apache=WARN</span><br><span class="line"></span><br><span class="line"># Spring</span><br><span class="line">log4j.logger.org.springframework=WARN</span><br><span class="line"></span><br><span class="line"># Default Shiro logging</span><br><span class="line">log4j.logger.org.apache.shiro=INFO</span><br><span class="line"></span><br><span class="line"># Disable verbose logging</span><br><span class="line">log4j.logger.org.apache.shiro.util.ThreadContext=WARN</span><br><span class="line">log4j.logger.org.apache.shiro.cache.ehcache.EhCache=WARN</span><br></pre></td></tr></table></figure><p>以及shrio.ini</p><p>下载插件，下载完成之后，重启IDEA plugins –&gt; Action Tracker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line"># user <span class="string">&#x27;root&#x27;</span> with password <span class="string">&#x27;secret&#x27;</span> and the <span class="string">&#x27;admin&#x27;</span> <span class="type">role</span></span><br><span class="line"><span class="variable">root</span> <span class="operator">=</span> secret, admin</span><br><span class="line"># user <span class="string">&#x27;guest&#x27;</span> with the password <span class="string">&#x27;guest&#x27;</span> and the <span class="string">&#x27;guest&#x27;</span> <span class="type">role</span></span><br><span class="line"><span class="variable">guest</span> <span class="operator">=</span> guest, guest</span><br><span class="line"># user <span class="string">&#x27;presidentskroob&#x27;</span> with password <span class="string">&#x27;12345&#x27;</span> (<span class="string">&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="string"># my luggage!!!&quot;</span> ;)), and role <span class="string">&#x27;president&#x27;</span></span><br><span class="line">presidentskroob = <span class="number">12345</span>, president</span><br><span class="line"># user <span class="string">&#x27;darkhelmet&#x27;</span> with password <span class="string">&#x27;ludicrousspeed&#x27;</span> and roles <span class="string">&#x27;darklord&#x27;</span> and <span class="string">&#x27;schwartz&#x27;</span></span><br><span class="line">darkhelmet = ludicrousspeed, darklord, schwartz</span><br><span class="line"># user <span class="string">&#x27;lonestarr&#x27;</span> with password <span class="string">&#x27;vespa&#x27;</span> and roles <span class="string">&#x27;goodguy&#x27;</span> and <span class="string">&#x27;schwartz&#x27;</span></span><br><span class="line">lonestarr = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Roles with assigned permissions</span><br><span class="line"># </span><br><span class="line"># Each line conforms to the format defined in the</span><br><span class="line"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[roles]</span><br><span class="line"># <span class="string">&#x27;admin&#x27;</span> role has all permissions, indicated by the wildcard <span class="string">&#x27;*&#x27;</span></span><br><span class="line">admin = *</span><br><span class="line"># The <span class="string">&#x27;schwartz&#x27;</span> role can <span class="keyword">do</span> <span class="title function_">anything</span> <span class="params">(*)</span> with any lightsaber:</span><br><span class="line">schwartz = lightsaber:*</span><br><span class="line"># The <span class="string">&#x27;goodguy&#x27;</span> role is allowed to <span class="string">&#x27;drive&#x27;</span> (action) the <span class="title function_">winnebago</span> <span class="params">(type)</span> with</span><br><span class="line"># license plate <span class="string">&#x27;eagle5&#x27;</span> (instance specific id)</span><br><span class="line">goodguy = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><p>继续复制quickstart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line">    <span class="comment">//使用日志输出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>();</span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line">        <span class="comment">//现在设置了一个简单的Shiro环境，让我们看看您可以做什么：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">//获取当前正在执行的用户：getSubject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过当前用户拿到Session</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Securit=&gt;Session! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这段if 就是判断当前的用户是否被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果认证成功，就拿到账号密码生成一个Token令牌，没有获取，随机生成</span></span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            <span class="comment">//设置记住我</span></span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行了登录操作！</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123; <span class="comment">//未知的账户</span></span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;<span class="comment">//密码不正常，然后输出</span></span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;<span class="comment">//用户被锁定，比如说输入5次失败，锁定账户</span></span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前用户的验证码</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试角色，比如之前的vip1，vip2</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查是否有什么权限，粗粒度！</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果全选不满足就输出</span></span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否拥有更高级权限，细粒度！</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line">        <span class="comment">//结束系统</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shiro&quot;&gt;&lt;a href=&quot;#shiro&quot; class=&quot;headerlink&quot; title=&quot;shiro&quot;&gt;&lt;/a&gt;shiro&lt;/h2&gt;&lt;h3 id=&quot;什么是Shiro&quot;&gt;&lt;a href=&quot;#什么是Shiro&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="spring" scheme="http://example.com/categories/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫常用库方法总结</title>
    <link href="http://example.com/2022/07/23/%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/07/23/%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-07-23T10:48:13.000Z</published>
    <updated>2022-07-25T14:03:06.221Z</updated>
    
    <content type="html"><![CDATA[<p>网页图片批量获取：</p><h2 id="图片下载："><a href="#图片下载：" class="headerlink" title="图片下载："></a>图片下载：</h2><p><em><strong>urllib库</strong></em>  </p><blockquote><p>urllib.request-打开和读取url<br>urllib.error-用来抛出异常<br>urllib.parse-解析url<br>urllib.robotpaser-解析robots.txt<br><img src="https://www.runoob.com/wp-content/uploads/2021/04/ulrib-py3.svg" alt="urllib">  </p></blockquote><p>urllib.request 定义了一些打开 URL 的函数和类，包含授权验证、重定向、浏览器 cookies等。</p><p>urllib.request 可以模拟浏览器的一个请求发起过程。</p><p>我们可以使用 urllib.request 的 urlopen 方法来打开一个 URL，语法格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</span><br></pre></td></tr></table></figure><ol><li>url：url 地址。</li><li>data：发送到服务器的其他数据对象，默认为 No ne。</li><li>timeout：设置访问超时时间。</li><li>cafile 和 capath：cafile 为 CA 证书， 5.capath 为 CA 证书的路径，使用 HTTPS 需要用到。</li><li>cadefault：已经被弃用。</li><li>context：ssl.SSLContext类型，用来指定 SSL 设置。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib.request import urlopen</span><br><span class="line"></span><br><span class="line">myURL = urlopen(&quot;https://www.runoob.com/&quot;)</span><br><span class="line">print(myURL.read())</span><br></pre></td></tr></table></figure></li><li>read() 是读取整个网页内容，我们可以指定读取的长度：</li><li>readline() - 读取文件的一行内容</li><li>readlines() - 读取文件的全部内容，它会把读取的内容赋值给一个列表变量。  <blockquote><p>‘r’：只读。该文件必须已存在。<br>‘r+’：可读可写。该文件必须已存在，写为追加在文件内容末尾。<br>‘rb’：表示以二进制方式读取文件。该文件必须已存在。<br>‘w’：只写。打开即默认创建一个新文件，如果文件已存在，则覆盖写(即文件内原始数据会被新写入的数据清空覆盖)。<br>‘w+’：写读。打开创建新文件并写入数据，如果文件已存在，则覆盖写。<br>‘wb’：表示以二进制写方式打开，只能写文件， 如果文件不存在，创建该文件；如果文件已存在，则覆盖写。<br>‘a’：追加写。若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写(追加在后面)，不能读。  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">exists = os.path.exists(&quot;foo.txt&quot;)</span><br><span class="line">if exists:</span><br><span class="line">    abspath = os.path.abspath(&quot;foo.txt&quot;)</span><br><span class="line">    print(abspath)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;文件不存在&quot;)</span><br></pre></td></tr></table></figure><p>**模拟头部信息<br>我们抓取网页一般需要对 headers（网页头信息）进行模拟，这时候需要使用到 urllib.request.Request 类：</p></li></ol><p>class urllib.request.Request(url, data&#x3D;None, headers&#x3D;{}, origin_req_host&#x3D;None, unverifiable&#x3D;False, method&#x3D;None)<br>url：url 地址。<br>data：发送到服务器的其他数据对象，默认为 None。<br>headers：HTTP 请求的头部信息，字典格式。<br>origin_req_host：请求的主机地址，IP 或域名。<br>unverifiable：很少用整个参数，用于设置网页是否需要验证，默认是False。。<br>method：请求方法， 如 GET、POST、DELETE、PUT等。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line">url = &#x27;https://www.runoob.com/?s=&#x27;  # 菜鸟教程搜索页面</span><br><span class="line">keyword = &#x27;Python 教程&#x27;</span><br><span class="line">key_code = urllib.request.quote(keyword)  # 对请求进行编码</span><br><span class="line">url_all = url+key_code</span><br><span class="line">header = &#123;</span><br><span class="line">    &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span><br><span class="line">&#125;   #头部信息</span><br><span class="line">request = urllib.request.Request(url_all,headers=header)</span><br><span class="line">reponse = urllib.request.urlopen(request).read()</span><br><span class="line"></span><br><span class="line">fh = open(&quot;./urllib_test_runoob_search.html&quot;,&quot;wb&quot;)    # 将文件写入到当前目录中</span><br><span class="line">fh.write(reponse)</span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure><p><img src="https://www.runoob.com/wp-content/uploads/2021/04/6BD0D456-E929-4C11-9118-F09C85AEA427.jpg" alt="文件内容"></p><p><strong>urllib.error</strong><br>urllib.error 模块为 urllib.request 所引发的异常定义了异常类，基础异常类是 URLError。</p><p>urllib.error 包含了两个方法，URLError 和 HTTPError。</p><ol><li><p>URLError 是 OSError 的一个子类，用于处理程序在遇到问题时会引发此异常（或其派生的异常），包含的属性 reason 为引发异常的原因。</p></li><li><p>HTTPError 是 URLError 的一个子类，用于处理特殊 HTTP 错误例如作为认证请求的时候，包含的属性 code 为 HTTP 的状态码， reason 为引发异常的原因，headers 为导致 HTTPError 的特定 HTTP 请求的 HTTP 响应头。</p></li></ol><p>对不存在的网页抓取并处理异常:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.error</span><br><span class="line"></span><br><span class="line">myURL1 = urllib.request.urlopen(&quot;https://www.runoob.com/&quot;)</span><br><span class="line">print(myURL1.getcode())   # 200</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    myURL2 = urllib.request.urlopen(&quot;https://www.runoob.com/no.html&quot;)</span><br><span class="line">except urllib.error.HTTPError as e:</span><br><span class="line">    if e.code == 404:</span><br><span class="line">        print(404)   # 404</span><br></pre></td></tr></table></figure><p><strong>urllib.parse</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.urlparse(urlstring, scheme=&#x27;&#x27;, allow_fragments=True)</span><br><span class="line"></span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">o = urlparse(&quot;https://www.runoob.com/?s=python+%E6%95%99%E7%A8%8B&quot;)</span><br><span class="line">print(o)</span><br></pre></td></tr></table></figure><p>*<strong><strong><strong><strong><strong>演示结果</strong></strong></strong></strong></strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ParseResult(scheme=&#x27;https&#x27;, netloc=&#x27;www.runoob.com&#x27;, path=&#x27;/&#x27;, params=&#x27;&#x27;, query=&#x27;s=python+%E6%95%99%E7%A8%8B&#x27;, fragment=&#x27;&#x27;)  </span><br></pre></td></tr></table></figure><p>从结果可以看出，内容是一个元组，包含 6 个字符串：协议，位置，路径，参数，查询，判断。</p><p>好家伙，索儿写的果真是抛砖引玉啊！  </p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>作用：正则可以使用限定符，匹配字符出现的次数，这样一来灵活度都高了   </p><p><img src="https://img-blog.csdnimg.cn/20200506162325642.png" alt="重复限定符">  </p><p><strong>正则表达式的特殊字符串</strong><br><img src="https://img-blog.csdnimg.cn/20200506162325642.png" alt="特殊字符串"></p><p>我终于爬出来了！哈哈哈哈。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ua_ck</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    网站需要登录才能采集，需要从Network--Doc里复制User-Agent和Cookie，Cookie要转化为字典，否则会采集失败！！！！！</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    user_agent = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    cookies = <span class="string">&#x27;ll=&quot;118202&quot;; bid=FsStcocWuPQ; _vwo_uuid_v2=D65179C81F8EE8041E5F8605041534542|e1ed6add019a5cf6cdb06398640e7fe6; ct=y; gr_user_id=43e3a769-ff1c-4abe-b1c3-f7d5b28082de; douban-fav-remind=1; viewed=&quot;20438158_10799082_3043970_35174681_26929955_3932365_26886337_27667378_33419041_33385402&quot;; push_doumail_num=0; push_noty_num=0; __utmc=30149280; __utmc=223695111; _pk_ref.100001.4cf6=%5B%22%22%2C%22%22%2C1599712590%2C%22https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3D-946ZDrFNbdKZE0IGp73NUS3eCUaoTpabx75ZzZjM59T_FqZIgo-aeRfe2xfnu1o%26wd%3D%26eqid%3Da1f8e3670000ef4d000000065f59ad4b%22%5D; _pk_ses.100001.4cf6=*; __utma=30149280.1986063068.1597310055.1599704141.1599712590.74; __utmz=30149280.1599712590.74.69.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; __utmb=223695111.0.10.1599712590; __utma=223695111.1305332624.1597310055.1599704141.1599712590.43; __utmz=223695111.1599712590.43.40.utmcsr=baidu|utmccn=(organic)|utmcmd=organic; ap_v=0,6.0; douban-profile-remind=1; __utmv=30149280.17799; __utmb=30149280.8.10.1599712590; dbcl2=&quot;223162585:V5BfOpq2kcs&quot;; ck=qnBB; _pk_id.100001.4cf6=991c66698d6e616d.1597310055.43.1599714528.1599704141.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Cookie转化为字典</span></span><br><span class="line">    cookies = cookies.split(<span class="string">&#x27;; &#x27;</span>)</span><br><span class="line">    cookies_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cookies:</span><br><span class="line">        cookies_dict[i.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]] = i.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user_agent, cookies_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_urls</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    n:页面数量，总共有25个页面</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    urls = []</span><br><span class="line">    num = (n-<span class="number">1</span>)*<span class="number">25</span>+<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num, <span class="number">25</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        urls.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_movies_url</span>(<span class="params">url, u_a, c_d</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    url：每一个页面的链接</span></span><br><span class="line"><span class="string">    u_a：User-Agent</span></span><br><span class="line"><span class="string">    c_d：cookies</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html = requests.get(url,</span><br><span class="line">                        headers=u_a,  <span class="comment"># 加载User-Agent</span></span><br><span class="line">                        cookies=c_d)  <span class="comment"># 加载cookie</span></span><br><span class="line"></span><br><span class="line">    html.encoding = html.apparent_encoding  <span class="comment"># 解决乱码的万金油方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;网页访问成功，代码：&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(html.status_code))</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(html.text, <span class="string">&#x27;html.parser&#x27;</span>)  <span class="comment"># 用 html.parser 来解析网页</span></span><br><span class="line">    items = soup.find(<span class="string">&#x27;ol&#x27;</span>, class_=<span class="string">&#x27;grid_view&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    movies_url = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="comment"># 电影链接</span></span><br><span class="line">        movie_href = item.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;hd&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        movies_url.append(movie_href)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> movies_url</span><br><span class="line">    time.sleep(<span class="number">0.4</span>)    <span class="comment"># 设置时间间隔，0.4秒采集一次，避免频繁登录网页 </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_movie_info</span>(<span class="params">href, u_a, c_d</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    href：每一部电影的链接</span></span><br><span class="line"><span class="string">    u_a：User-Agent</span></span><br><span class="line"><span class="string">    c_d：cookies</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    html = requests.get(href,</span><br><span class="line">                        headers=u_a,</span><br><span class="line">                        cookies=c_d)</span><br><span class="line">    soup = BeautifulSoup(html.text, <span class="string">&#x27;html.parser&#x27;</span>)  <span class="comment"># 用 html.parser 来解析网页</span></span><br><span class="line">    item = soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    movie = &#123;&#125;  <span class="comment"># 新建字典，存放电影信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie[<span class="string">&#x27;电影名称&#x27;</span>] = item.h1.span.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导演、类型、制片国家/地区、语言、上映时间、片长（部分电影这些信息不全，先全部采集，留待数据分析时处理）</span></span><br><span class="line">    movie[<span class="string">&#x27;电影其他信息&#x27;</span>] = item.find(</span><br><span class="line">        <span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;info&#x27;</span>).text.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> movie[<span class="string">&#x27;电影其他信息&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">            movie[i.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]] = i.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 豆瓣评分、评分人数</span></span><br><span class="line">    movie[<span class="string">&#x27;评分&#x27;</span>] = item.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;interest_sectl&#x27;</span>).find(</span><br><span class="line">        <span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;rating_self clearfix&#x27;</span>).find(<span class="string">&#x27;strong&#x27;</span>, class_=<span class="string">&#x27;ll rating_num&#x27;</span>).text</span><br><span class="line">    movie[<span class="string">&#x27;评分人数&#x27;</span>] = item.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;interest_sectl&#x27;</span>).find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;rating_self clearfix&#x27;</span>).find(</span><br><span class="line">        <span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;rating_sum&#x27;</span>).find(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">property</span>=<span class="string">&#x27;v:votes&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> movie</span><br><span class="line">    time.sleep(<span class="number">0.4</span>)  <span class="comment"># 0.4秒采集一次，避免频繁登录网页</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    n:页面数量，总共有10个页面</span></span><br><span class="line"><span class="string">    u_a：User-Agent</span></span><br><span class="line"><span class="string">    c_d：cookies</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开始采集数据，预计耗时2分钟&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理User-Agent和Cookie</span></span><br><span class="line">    login = ua_ck()</span><br><span class="line">    u_a = login[<span class="number">0</span>]</span><br><span class="line">    c_d = login[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取豆瓣top250每一页的链接，共10页</span></span><br><span class="line">    urls = get_urls(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;豆瓣10个网页链接已生成！！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取每一页25部电影的链接，共250部</span></span><br><span class="line">    top250_urls = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        result = get_movies_url(url, u_a, c_d)</span><br><span class="line">        top250_urls.extend(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;250部电影链接采集完成！！开始采集每部电影的详细信息(预计耗时5分钟).......&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取每一部电影的详细信息</span></span><br><span class="line">    top250_movie = []  <span class="comment"># 储存每部电影的信息</span></span><br><span class="line">    error_href = []  <span class="comment"># 储存采集错误的网址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> top250_urls:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            movie = get_movie_info(href, u_a, c_d)</span><br><span class="line">            top250_movie.append(movie)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            error_href.append(href)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;采集失败，失败网址是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(href))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;电影详细信息采集完成！！总共采集&#123;&#125;条数据&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(top250_movie)))</span><br><span class="line">    <span class="keyword">return</span> top250_movie, error_href</span><br><span class="line">result = main(<span class="number">10</span>)</span><br><span class="line">df = pd.DataFrame(result[<span class="number">0</span>])</span><br><span class="line">df.to_excel(<span class="string">&#x27;output1.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>加油！！！<br><strong>书接上文</strong><br><em><strong>正则表达式</strong></em>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#：匹配出，⼀个字符串第⼀个字⺟为⼤写字符，后⾯都是⼩写字⺟并且这些⼩写字⺟可有可⽆</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;M&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;MnnM&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[A-Z][a-z]*&quot;</span>,<span class="string">&quot;Aabcdef&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"><span class="comment">#匹配出，变量名是否有效</span></span><br><span class="line">names = [<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;2_name&quot;</span>, <span class="string">&quot;__name__&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    ret = re.match(<span class="string">&quot;[a-zA-Z_]+[\w]*&quot;</span>,name)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;变量名 %s 符合要求&quot;</span> % ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;变量名 %s ⾮法&quot;</span> % name)</span><br><span class="line"><span class="comment">#匹配出，0到99之间的数字</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?[0-9]&quot;</span>,<span class="string">&quot;7&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d&quot;</span>,<span class="string">&quot;33&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"><span class="comment"># 这个结果并不是想要的，利⽤$才能解决</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d&quot;</span>,<span class="string">&quot;09&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;6&#125;&quot;</span>,<span class="string">&quot;12a3g45678&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"><span class="comment">#匹配出，8到20位的密码，可以是⼤⼩写英⽂字⺟、数字、下划线</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[a-zA-Z0-9_]&#123;8,20&#125;&quot;</span>,<span class="string">&quot;1ad12f23s34455ff66&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line">```  </span><br><span class="line">**解析正则表达式**  </span><br><span class="line">&gt;[a-zA-Z_]+[\w]*  </span><br><span class="line">第一个字符是a-z或A-Z,-等字符，他们可以存在<span class="number">1</span>次或者<span class="number">00</span>次 /w匹配单词字符，即a-z、A-Z、<span class="number">0</span>-<span class="number">9</span>、_</span><br><span class="line">  </span><br><span class="line">结果：</span><br><span class="line"><span class="number">1.</span> M</span><br><span class="line"><span class="number">2.</span> Mnn</span><br><span class="line"><span class="number">3.</span> Aabcdef</span><br><span class="line"><span class="number">4.</span> 变量名 name1 符合要求</span><br><span class="line"><span class="number">5.</span> 变量名 _name 符合要求</span><br><span class="line"><span class="number">6.</span> 变量名 2_name ⾮法</span><br><span class="line"><span class="number">7.</span> 变量名 __name__ 符合要求</span><br><span class="line"><span class="number">8.</span> <span class="number">7</span></span><br><span class="line"><span class="number">9.</span> <span class="number">33</span></span><br><span class="line"><span class="number">10.</span> <span class="number">0</span></span><br><span class="line"><span class="number">11.</span> 12a3g4</span><br><span class="line"><span class="number">12.</span> 1ad12f23s34455ff66    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">匹配开头结尾  </span><br><span class="line">^ 匹配字符串开头  </span><br><span class="line">$ 匹配字符串结尾  </span><br><span class="line">```python  </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">email_list = [<span class="string">&quot;xiaoWang@163.com&quot;</span>, <span class="string">&quot;xiaoWang@163.comheihei&quot;</span>, <span class="string">&quot;.com.xiaowang@qq.com&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> email_list:</span><br><span class="line">    ret = re.match(<span class="string">&quot;[\w]&#123;4,20&#125;@163\.com$&quot;</span>, email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 是符合规定的邮件地址,匹配后的结果是:%s&quot;</span> % (email, ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 不符合要求&quot;</span> % email)  </span><br><span class="line">```  </span><br><span class="line"> </span><br><span class="line">xiaoWang@<span class="number">163.</span>com 是符合规定的邮件地址,匹配后的结果是:xiaoWang@<span class="number">163.</span>com</span><br><span class="line">xiaoWang@<span class="number">163.</span>comheihei 不符合要求</span><br><span class="line">.com.xiaowang@qq.com 不符合要求  </span><br><span class="line">**匹配分组**  </span><br><span class="line"> |匹配左右任意⼀个表达式  </span><br><span class="line">(ab)将括号中字符作为⼀个分组  </span><br><span class="line">\num引⽤分组num匹配到的字符串  </span><br><span class="line">(?P&lt;name&gt;)分组起别名，匹配到的子串组在外部是通过定义的 name 来获取的  </span><br><span class="line">(?P=name)引⽤别名为name分组匹配到的字符串 </span><br><span class="line">---  ---</span><br><span class="line">举个例子：|  </span><br><span class="line">```python</span><br><span class="line"> <span class="comment">#匹配出0-100之间的数字</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d$|100&quot;</span>,<span class="string">&quot;8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># 8</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d$|100&quot;</span>,<span class="string">&quot;78&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># 78</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d$|100&quot;</span>,<span class="string">&quot;08&quot;</span>)</span><br><span class="line"><span class="comment"># print(ret.group()) # 不是0-100之间</span></span><br><span class="line">ret = re.match(<span class="string">&quot;[1-9]?\d$|100&quot;</span>,<span class="string">&quot;100&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>“[1-9]?\d$|100”匹配的是0~99和100   </p></blockquote><p>举个例子：（）  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需求：匹配出163、126、qq邮箱</span></span><br><span class="line">ret = re.match(<span class="string">&quot;\w&#123;4,20&#125;@163\.com&quot;</span>, <span class="string">&quot;test@163.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># test@163.com</span></span><br><span class="line">ret = re.match(<span class="string">&quot;\w&#123;4,20&#125;@(163|126|qq)\.com&quot;</span>, <span class="string">&quot;test@126.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># test@126.com</span></span><br><span class="line">ret = re.match(<span class="string">&quot;\w&#123;4,20&#125;@(163|126|qq)\.com&quot;</span>, <span class="string">&quot;test@qq.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group()) <span class="comment"># test@qq.com</span></span><br><span class="line">ret = re.match(<span class="string">&quot;\w&#123;4,20&#125;@(163|126|qq)\.com&quot;</span>, <span class="string">&quot;test@gmail.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(ret.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是163、126、qq邮箱&quot;</span>) <span class="comment"># 不是163、126、qq邮箱</span></span><br><span class="line"><span class="comment">#不是以4、7结尾的⼿机号码(11位)</span></span><br><span class="line">tels = [<span class="string">&quot;13100001234&quot;</span>, <span class="string">&quot;18912344321&quot;</span>, <span class="string">&quot;10086&quot;</span>, <span class="string">&quot;18800007777&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> tel <span class="keyword">in</span> tels:</span><br><span class="line">    ret = re.match(<span class="string">&quot;1\d&#123;9&#125;[0-35-68-9]&quot;</span>, tel)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 不是想要的⼿机号&quot;</span> % tel)</span><br><span class="line"><span class="comment">#提取区号和电话号码</span></span><br><span class="line">ret = re.match(<span class="string">&quot;([^-]*)-(\d+)&quot;</span>,<span class="string">&quot;010-12345678&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret.group())</span><br><span class="line"><span class="built_in">print</span>(ret.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(ret.group(<span class="number">2</span>))      </span><br></pre></td></tr></table></figure><p>解析</p><blockquote><p>\w{4,20}@(163|126|qq).com<br>匹配4-20位的qq，126，136邮箱<br>举例：\number</p></blockquote><p>匹配数字代表的组合。每个括号是一个组合，组合从1开始编号。比如 (.+) \1 匹配 ‘the the’ 或者 ‘55 55’, 但不会匹配 ‘thethe’ (注意组合后面的空格)。这个特殊序列只能用于匹配前面99个组合。如果 number 的第一个数位是0， 或者 number 是三个八进制数，它将不会被看作是一个组合，而是八进制的数字值。在 ‘[‘ 和 ‘]’ 字符集合内，任何数字转义都被看作是字符。</p><p>例子1：匹配出 <html>hh</html><br>\1,…,\9，匹配第n个分组的内容。如例子所示，指匹配第一个分组的内容。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 正确的理解思路：如果在第⼀对&lt;&gt;中是什么，按理说在后⾯的那对&lt;&gt;中就应该是什么。通过引⽤分组中匹配到的数据即可，但是要注意是元字符串，即类似 r&quot;&quot;这种格式。</span></span><br><span class="line">ret = re.match(<span class="string">r&quot;&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>)</span><br><span class="line"><span class="comment"># 因为2对&lt;&gt;中的数据不⼀致，所以没有匹配出来</span></span><br><span class="line">test_label = [<span class="string">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;hh&lt;/htmlbalabala&gt;&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> test_label:</span><br><span class="line">    ret = re.match(<span class="string">r&quot;&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;&quot;</span>, label)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 这是一对正确的标签&quot;</span> % ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 这是⼀对不正确的标签&quot;</span> % label)  </span><br></pre></td></tr></table></figure><hr><p>举例：(?P<name>) (?P&#x3D;name)</p><p>一个用于标记，一个用于在同一个正则表达式中复用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">labels = [<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>, <span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt;&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">    ret = re.match(<span class="string">r&quot;&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;&quot;</span>, label)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 是符合要求的标签&quot;</span> % ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 不符合要求&quot;</span> % label) </span><br><span class="line">```  </span><br><span class="line">---  </span><br><span class="line">re.<span class="built_in">compile</span> 函数</span><br><span class="line"><span class="built_in">compile</span> 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</span><br><span class="line">``` python </span><br><span class="line">prog = re.<span class="built_in">compile</span>(pattern)</span><br><span class="line">result = prog.match(string)  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">result = re.match(pattern, string)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)   </span><br><span class="line">m = pattern.match(<span class="string">&#x27;one12twothree34four&#x27;</span>, <span class="number">3</span>, <span class="number">10</span>) <span class="comment"># 从&#x27;1&#x27;的位置开始匹配，正好匹配</span></span><br><span class="line"> <span class="built_in">print</span> m                                         <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match <span class="built_in">object</span> at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line">m.group(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br><span class="line">m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"> m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面，当匹配成功时返回一个 Match 对象，其中：</p><p>group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；<br>start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；<br>end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；<br>span([group]) 方法返回 (start(group), end(group))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网页图片批量获取：&lt;/p&gt;
&lt;h2 id=&quot;图片下载：&quot;&gt;&lt;a href=&quot;#图片下载：&quot; class=&quot;headerlink&quot; title=&quot;图片下载：&quot;&gt;&lt;/a&gt;图片下载：&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;urllib库&lt;/strong&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="python_爬虫" scheme="http://example.com/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫入门学习</title>
    <link href="http://example.com/2022/07/22/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/22/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-22T11:46:46.000Z</published>
    <updated>2022-07-25T11:34:39.879Z</updated>
    
    <content type="html"><![CDATA[<p>真正的成长，应该是注重健康的</p><p>爬虫一直以来，被人们以为是一项不尊重知识产权的技术，但是，就技术层面以来，他只是提供一种技术用来爬取结构化数据，这种数据可用于各种有用的应用程序，以及数据挖掘，信息处理或历史存档。因此，可以提供一种说法，就是技术无罪，我们可以通过此项技术提高生产力，产生更多有力的工具及资料，因此爬虫技术应该重新认识。  </p><blockquote><p>scrapy：是一个应用程序框架，用于对网站进行爬行和提取结构化数据，这些结构化数据可用于各种有用的应用程序，如数据挖掘、信息处理或历史存档。  </p></blockquote><hr><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="分析页面结构"><a href="#分析页面结构" class="headerlink" title="分析页面结构"></a>分析页面结构</h2><p><a href="http://quotes.toscrape.com/%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E7%BB%83%E4%B9%A0%E7%88%AC%E8%99%AB%E7%9A%84%E7%BD%91%E7%AB%99">http://quotes.toscrape.com/，是一个可以练习爬虫的网站</a><br><img src="https://img-blog.csdnimg.cn/20200401164052584.png" alt="爬虫小项目"><br>这是一个极为简单的页面，每个页面有十个class为quote的小卡片里面包含text，auther，tag。<br>每个页面有个下一页的按钮。 </p><p>url：<a href="http://quotes.toscrape.com/">http://quotes.toscrape.com/</a><br>由于结构过于繁琐，如果有点html结构基础，是可以判断整个页面的结构分布的，因此，直接开始。<br>每个quote是由三部分组成，文本，作者，标签。<br>具体的代码：    </p><pre><code>  import scrapy      class QuotesSpider(scrapy.Spider):      name = &#39;quotes&#39;     start_urls = [       &#39;http://quotes.toscrape.com/tag/humor/&#39;,    ]    def parse(self, response):    for quote in response.css(&#39;div.quote&#39;):        yield &#123;            &#39;author&#39;: quote.xpath(&#39;span/small/text()&#39;).get(),            &#39;text&#39;: quote.css(&#39;span.text::text&#39;).get(),        &#125;    next_page = response.css(&#39;li.next a::attr(&quot;href&quot;)&#39;).get()    if next_page is not None:        yield response.follow(next_page, self.parse)</code></pre><p>妈的 &gt;_&lt; 好难啊  </p><h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><blockquote><p>def parse(self, response):</p></blockquote><hr><p>这个 parse() 方法通常解析response，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">&#x27;div.quote&#x27;</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: quote.xpath(<span class="string">&#x27;span/small/text()&#x27;</span>).get(),</span><br><span class="line">            <span class="string">&#x27;text&#x27;</span>: quote.css(<span class="string">&#x27;span.text::text&#x27;</span>).get(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next_page = response.css(<span class="string">&#x27;li.next a::attr(&quot;href&quot;)&#x27;</span>).get()</span><br><span class="line">    <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">yield</span> response.follow(next_page, self.parse)</span><br><span class="line">```  </span><br><span class="line">使用CSS选择器循环 div.quote 元素，然后使用css选择器或者xpath生成一个包含 quote的作者、文本的列表  </span><br><span class="line">css选择器的使用无缝对接css中我们对选择器的认知</span><br><span class="line">xpath是官方推荐我们使用的</span><br><span class="line">查找到下一页的链接，并使用它继续调度 parse() 方法</span><br><span class="line"><span class="comment">## scrapy spider  </span></span><br><span class="line">&gt;scrapy startproject xxx</span><br><span class="line">---</span><br><span class="line">实现scrapy spider</span><br><span class="line"><span class="comment">### 第一步 创建一个新的scrapy项目  </span></span><br></pre></td></tr></table></figure><p>scrapy startproject xxx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### 第二步 定义继承spider的类并定义初始请求  </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class QuotesSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;quotes&quot;</span><br><span class="line">    start_urls = [</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/1/&#x27;,</span><br><span class="line">        &#x27;http://quotes.toscrape.com/page/2/&#x27;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        page = response.url.split(&quot;/&quot;)[-2] #根据上面的链接提取分页,如：/page/1/，提取到的就是：1</span><br><span class="line">        filename = &#x27;quotes-%s.html&#x27; % page #拼接文件名，如果是第一页，最终文件名便是：newpage-1.html</span><br><span class="line">        with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(&#x27;Saved file %s&#x27; % filename)</span><br></pre></td></tr></table></figure><p>还要定义属性和方法</p><p>name ：标识Spider。它在一个项目中必须是唯一的，也就是说，不能为不同的Spider设置相同的名称。</p><p>start_urls：具有URL列表的类属性</p><p>parse() ：将被调用来处理这些URL的每个请求。parse() 是Scrapy的默认回调方法，对没有显式分配回调的请求调用该方法。</p><p>parse() 方法通常解析响应，将抓取的数据提取为dict，并查找新的URL以跟踪和创建新的请求。  </p><p><em><strong>scrapy crawl quotes</strong></em><br>妈的，学会了，不想写了<del>_</del>。  </p><h3 id="scarpy-shell"><a href="#scarpy-shell" class="headerlink" title="scarpy shell"></a>scarpy shell</h3><p>终端输入：</p><blockquote><p>scrapy shell url  </p></blockquote><p>response.css()<br>response.css(‘xxx’) 返回的是一个类似列表的对象：SelectorList，<br>data中存储的是提取到的标签，<br>xpath中存储的XPath表达式，实际上CSS选择器是在后台转换为XPath表达式的<br>允许你进一步的细化选择和提取数据<br>response.css(‘xxx::text’) 与上面方法不同之处在于，data中存储的是提取到的标签的文本<br>response.css(‘xxx’).getall()、response.css(‘xxx::text’).getall()<br>getall() 方法，返回的是一个列表，<br>列表中的值是 SelectorList 中的 data 值<br>一般而言，选择器返回的结果不止一个，getall() 方法 提取全部内容  </p><p>response.xpath这个不写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>quote = response.css(<span class="string">&quot;div.quote&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = quote.css(<span class="string">&quot;span.text::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">&#x27;“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author = quote.css(<span class="string">&quot;small.author::text&quot;</span>).get()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>author</span><br><span class="line"><span class="string">&#x27;Albert Einstein&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags = quote.css(<span class="string">&quot;div.tags a.tag::text&quot;</span>).getall()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags</span><br><span class="line">[<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;deep-thoughts&#x27;</span>, <span class="string">&#x27;thinking&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="存取json文件"><a href="#存取json文件" class="headerlink" title="存取json文件"></a>存取json文件</h3><p>在项目顶层目录下输入scrapy crawl quotes -o quotes.json</p><p>Scrapy 会生成quotes.json文件，并将爬取到的数据放到quotes.json文件中</p><h3 id="具体栗子"><a href="#具体栗子" class="headerlink" title="具体栗子"></a>具体栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;author&#x27;</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://quotes.toscrape.com/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        author_page_links = response.css(<span class="string">&#x27;.author + a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(author_page_links, self.parse_author)</span><br><span class="line"></span><br><span class="line">        pagination_links = response.css(<span class="string">&#x27;li.next a&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> response.follow_all(pagination_links, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_author</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">extract_with_css</span>(<span class="params">query</span>):</span><br><span class="line">            <span class="keyword">return</span> response.css(query).get(default=<span class="string">&#x27;&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: extract_with_css(<span class="string">&#x27;h3.author-title::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthdate&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-date::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;birthlocation&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-born-location::text&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;bio&#x27;</span>: extract_with_css(<span class="string">&#x27;.author-description::text&#x27;</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就写这么多吧。<br>本文参考CSDN博主索儿呀，索儿老师整理十分仔细，我写这个是为了记录学习爬虫的相关经历，如有冒犯，我会苏珊&gt;__&lt;<br><em><strong><a href="https://zhangguohao.blog.csdn.net/article/details/105245153">https://zhangguohao.blog.csdn.net/article/details/105245153</a></strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真正的成长，应该是注重健康的&lt;/p&gt;
&lt;p&gt;爬虫一直以来，被人们以为是一项不尊重知识产权的技术，但是，就技术层面以来，他只是提供一种技术用来爬取结构化数据，这种数据可用于各种有用的应用程序，以及数据挖掘，信息处理或历史存档。因此，可以提供一种说法，就是技术无罪，我们可以通过</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于ajax的使用说明</title>
    <link href="http://example.com/2022/07/17/%E5%85%B3%E4%BA%8Eajax%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://example.com/2022/07/17/%E5%85%B3%E4%BA%8Eajax%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2022-07-17T07:43:22.000Z</published>
    <updated>2022-07-25T11:34:54.758Z</updated>
    
    <content type="html"><![CDATA[<p>今天看关于ajax技术，这种技术本身是不难的，但是由于技术粗糙，好久没练过了，导致项目不足够了解，出现了许多问题，也有了整理这个的必要<br>呜呜呜</p><blockquote><p>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML） AJAX 不是新的编程语言，而是一种使用现有标准的新方法。AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。  </p></blockquote><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><hr><p>接着，开始编写具体的功能。  </p><p>**接着，最操蛋的事情来了，maven的pom.xml一直配置不好，速度奇慢，因此，搜索到了一种方法那就是！利用阿里云的镜像地址，速度飞起！</p><h2 id="打开-x2F-创建-settings-xml"><a href="#打开-x2F-创建-settings-xml" class="headerlink" title="打开&#x2F;创建 settings.xml"></a>打开&#x2F;创建 settings.xml</h2><p><img src="/../img/10.png" alt="这是图片"></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;&lt;mirrors&gt;    &lt;mirror&gt;        &lt;id&gt;alimaven&lt;/id&gt;        &lt;name&gt;aliyun maven&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;uk&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;        &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;CN&lt;/id&gt;        &lt;name&gt;OSChina Central&lt;/name&gt;        &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;    &lt;mirror&gt;        &lt;id&gt;nexus&lt;/id&gt;        &lt;name&gt;internal nexus repository&lt;/name&gt;        &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;/mirror&gt;&lt;/mirrors&gt;</code></pre></settings>  如此，便可以加快相关的部署及下载速度，同时，使用相关的jquery，我使用的是网址，并没有进行相关的maven配置。    <pre><code>&lt;script src=&quot;https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; </code></pre><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><p>具体的设想是设计一个输入框失去焦点的事件，即onblur()事件，对于页面进行局部刷新，实现相关的ajax作用  </p><blockquote><p>用户名<br>    <input type="text" id="txtname" onblur="an()">  </p></blockquote><pre><code>function an()&#123;    //请求将文本框输入的值发给服务器，    // 接受服务器的值    $.ajax(&#123;        url:&quot;$&#123;pageContext.request.contextPath&#125;/ajax/a1&quot;,        data:&#123;&quot;name&quot;:$(&quot;#txtname&quot;).val()&#125;,        success:function (data,status)&#123;            console.log(data)            alert(status)        &#125;    &#125;);&#125;</code></pre><p>然后实现当输入框内容为admin时，控制台显示为true，当输入框为其他数时，则为false。</p><p><img src="/../img/11.png" alt="不为admin时"></p><blockquote><p>Failed to load resource: the server responded with a status of 404 ()此类报错为正常错误，无须担心</p></blockquote><hr><p><img src="/../img/12.png" alt="为admin"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天看关于ajax技术，这种技术本身是不难的，但是由于技术粗糙，好久没练过了，导致项目不足够了解，出现了许多问题，也有了整理这个的必要&lt;br&gt;呜呜呜&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AJAX &amp;#x3D; Asynchronous JavaScript and XM</summary>
      
    
    
    
    
  </entry>
  
</feed>
