<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shiro</title>
    <url>/2022/07/12/shrio/</url>
    <content><![CDATA[<h2 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h2><h3 id="什么是Shiro"><a href="#什么是Shiro" class="headerlink" title="什么是Shiro?"></a>什么是Shiro?</h3><ul>
<li>Apache Shiro是一个Java 的<code>安全(权限)框架</code>。</li>
<li>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。</li>
<li>Shiro可以完成，<code>认证</code>，<code>授权</code>，<code>加密</code>，<code>会话管理</code>，<code>Web集成</code>，<code>缓存</code>等.</li>
<li><h2 id="官网-shiro-apache-org-x2F"><a href="#官网-shiro-apache-org-x2F" class="headerlink" title="官网: shiro.apache.org&#x2F;"></a>官网: <a href="https://link.juejin.cn/?target=http://shiro.apache.org/">shiro.apache.org&#x2F;</a></h2></li>
</ul>
<p>官方文档十分钟快速入门：<a href="https://link.juejin.cn/?target=http://shiro.apache.org/10-minute-tutorial.html">shiro.apache.org&#x2F;10-minute-t…</a></p>
<ul>
<li>下载地址:<a href="https://link.juejin.cn/?target=https://github.com/apache/shiro.git">github.com&#x2F;apache&#x2F;shir…</a></li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c3258b9e39b47be9614b0b113055af0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p>
<h3 id="Shiro的三大功能"><a href="#Shiro的三大功能" class="headerlink" title="Shiro的三大功能"></a>Shiro的三大功能</h3><p>Shiro有三大核心组件，即<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code></p>
<ul>
<li>Subject: 为<code>认证主体</code>。应用代码直接交互的对象是Subject,Subject代表了当前的用户。包含<code>Principals</code>和<code>Credentials</code>两个信息。</li>
<li>SecurityManager:为<code>安全管理员</code>。是Shiro架构的核心。与Subject的所有交互都会委托给SecurityManager,<br>Subject相当于是一个门面，而SecurityManager才是真正的执行者。它负责与Shiro 的其他组件进行交互。</li>
<li>Realm：是<code>一个域</code><br>。充当了Shiro与应用安全数据间的“桥梁”。Shiro从Realm中获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm中获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色、权限，进行验证用户的操作是否能过进行，可以把Realm看成DataSource，即安全数据源。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1df3b80052a40ecb8482475e35e127f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p>
<ul>
<li><code>Authentication</code>: 身份认证、登录，验证用户是不是拥有相应的身份;</li>
<li><code>Authorization</code>:授权,即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行什么操作，如:验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限!</li>
<li><code>Session Manager</code>: 会话管理，即用户登录后就是第-次会话，在没有退出之前，它的所有信息都在会话中;会话可以是普通的JavaSE环境，也可以是Web环境;</li>
<li><code>Cryptography</code>: 加密,保护数据的安全性，如密码加密存储到数据库中，而不是明文存储;</li>
<li><code>Web Support</code>: Web支持，可以非常容易的集成到Web环境;</li>
<li><code>Caching</code>: 缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查,这样可以提高效率</li>
<li><code>Concurrency</code>: Shiro支持多线程应用的并发验证，即，如在一个线程中开启另一个线程,能把权限自动的传播过去</li>
<li><code>Testing</code>:提供测试支持;</li>
<li><code>RunAs</code>:允许一个用户假装为另-一个用户(如果他们允许)的身份进行访问;</li>
<li><code>Remember Me</code>:记住我，这个是非常常见的功能，即一-次登录后， 下次再来的话不用登录了</li>
</ul>
<h3 id="shiro架构（外部）"><a href="#shiro架构（外部）" class="headerlink" title="shiro架构（外部）"></a>shiro架构（外部）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b00b0b78d68943feae4aa9832b82bb98~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p>
<p>从外部来看Shiro,即从应用程序角度来观察如何使用shiro完成工作: Subject 用户，SecurityManager管理所有用户 Realm连接数据</p>
<ul>
<li><code>subject</code>: 应用代码直接交互的对象是Subject, 也就是说<code>Shiro</code>的对外API核心就是<code>Subject</code>,<br>Subject代表了当前的用户，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject,如网络爬虫，机器人等，与Subject的所有交互都会委托给SecurityManager; Subject其实是一一个门面，<br>SecurityManageer 才是实际的执行者。</li>
<li><code>SecurityManager</code>: 安全管理器，即所有与安全有关的操作都会与<code>SercurityManager</code>交互,<br>并且它管理着所有的Subject,可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC的DispatcherServlet的角色</li>
<li><code>Realm</code>: Shiro从Realm获取安全数据 (如用户,角色，权限)，就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较，来确定用户的身份是否合法;也需要从<code>Realm</code><br>得到用户相应的角色、权限，进行验证用户的操作是否能够进行，可以把Realm看DataSource;</li>
</ul>
<h3 id="Shiro架构-内部"><a href="#Shiro架构-内部" class="headerlink" title="Shiro架构(内部)"></a>Shiro架构(内部)</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8991ce3120e94c9baccc4aae76666875~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p>
<ul>
<li><code>Subject</code>: 任何可以与应用交互的用户;</li>
<li><code>Security Manager</code>:相当于SpringMVC中的<code>DispatcherSerlet</code>; 是Shiro的<code>心脏</code>， 所有具体的交互都通过<code>Security Manager</code>进行控制，它管理者所有的Subject,<br>且负责进行认证,授权，会话，及缓存的管理。</li>
<li><code>Authenticator</code>:负责<code>Subject</code>认证， 是-一个扩展点，可以自定义实现;可以使用<code>认证策略</code>(Authentication Strategy)，即什么情况下算用户认证通过了;</li>
<li><code>Authorizer</code>:授权器，即访问控制器，用来决定主体是否有权限进行相应的操作;即控制着用户能访问应用中 的那些功能;</li>
<li><code>Realm</code>: 可以有-一个或者多个的realm, 可以认为是安全实体数据源，即用于获取安全实体的，可以用JDBC实现，也可以是内存实现等等，由用户提供;所以- -般在应用中都需要实现自己的realm</li>
<li><code>SessionManager</code>:管理Session生 命周期的组件,而Shiro并不仅仅可以用在Web环境，也可以用在普通的JavaSE环境中</li>
<li><code>CacheManager</code>: 缓存控制器，来管理如用户，角色，权限等缓存的;因为这些数据基本上很少改变,放到缓存中后可以提高访问的性能;</li>
<li><code>Cryptography</code>:密码模块，Shiro 提高了一些常见的加密组件用于密码加密， 解密等</li>
</ul>
<h2 id="Shiro快速入门"><a href="#Shiro快速入门" class="headerlink" title="Shiro快速入门"></a>Shiro快速入门</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载：GitHub资源</p>
<p>创建一个普通maven项目springboot-08-shiro，然后删除src目录和没用的文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更改增加版本号：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>复制 <a href="https://link.juejin.cn/?target=https://github.com/apache/shiro/tree/master/samples/quickstart/src/main/resources">github.com&#x2F;apache&#x2F;shir…</a></p>
<p>recourse下面的log4j.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m %n</span><br><span class="line"></span><br><span class="line"># General Apache libraries</span><br><span class="line">log4j.logger.org.apache=WARN</span><br><span class="line"></span><br><span class="line"># Spring</span><br><span class="line">log4j.logger.org.springframework=WARN</span><br><span class="line"></span><br><span class="line"># Default Shiro logging</span><br><span class="line">log4j.logger.org.apache.shiro=INFO</span><br><span class="line"></span><br><span class="line"># Disable verbose logging</span><br><span class="line">log4j.logger.org.apache.shiro.util.ThreadContext=WARN</span><br><span class="line">log4j.logger.org.apache.shiro.cache.ehcache.EhCache=WARN</span><br></pre></td></tr></table></figure>

<p>以及shrio.ini</p>
<p>下载插件，下载完成之后，重启IDEA plugins –&gt; Action Tracker</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line"># user <span class="string">&#x27;root&#x27;</span> with password <span class="string">&#x27;secret&#x27;</span> and the <span class="string">&#x27;admin&#x27;</span> <span class="type">role</span></span><br><span class="line"><span class="variable">root</span> <span class="operator">=</span> secret, admin</span><br><span class="line"># user <span class="string">&#x27;guest&#x27;</span> with the password <span class="string">&#x27;guest&#x27;</span> and the <span class="string">&#x27;guest&#x27;</span> <span class="type">role</span></span><br><span class="line"><span class="variable">guest</span> <span class="operator">=</span> guest, guest</span><br><span class="line"># user <span class="string">&#x27;presidentskroob&#x27;</span> with password <span class="string">&#x27;12345&#x27;</span> (<span class="string">&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="string"># my luggage!!!&quot;</span> ;)), and role <span class="string">&#x27;president&#x27;</span></span><br><span class="line">presidentskroob = <span class="number">12345</span>, president</span><br><span class="line"># user <span class="string">&#x27;darkhelmet&#x27;</span> with password <span class="string">&#x27;ludicrousspeed&#x27;</span> and roles <span class="string">&#x27;darklord&#x27;</span> and <span class="string">&#x27;schwartz&#x27;</span></span><br><span class="line">darkhelmet = ludicrousspeed, darklord, schwartz</span><br><span class="line"># user <span class="string">&#x27;lonestarr&#x27;</span> with password <span class="string">&#x27;vespa&#x27;</span> and roles <span class="string">&#x27;goodguy&#x27;</span> and <span class="string">&#x27;schwartz&#x27;</span></span><br><span class="line">lonestarr = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># Roles with assigned permissions</span><br><span class="line"># </span><br><span class="line"># Each line conforms to the format defined in the</span><br><span class="line"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">[roles]</span><br><span class="line"># <span class="string">&#x27;admin&#x27;</span> role has all permissions, indicated by the wildcard <span class="string">&#x27;*&#x27;</span></span><br><span class="line">admin = *</span><br><span class="line"># The <span class="string">&#x27;schwartz&#x27;</span> role can <span class="keyword">do</span> <span class="title function_">anything</span> <span class="params">(*)</span> with any lightsaber:</span><br><span class="line">schwartz = lightsaber:*</span><br><span class="line"># The <span class="string">&#x27;goodguy&#x27;</span> role is allowed to <span class="string">&#x27;drive&#x27;</span> (action) the <span class="title function_">winnebago</span> <span class="params">(type)</span> with</span><br><span class="line"># license plate <span class="string">&#x27;eagle5&#x27;</span> (instance specific id)</span><br><span class="line">goodguy = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure>

<p>继续复制quickstart</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.text.IniRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line">    <span class="comment">//使用日志输出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultSecurityManager</span>();</span><br><span class="line">        <span class="type">IniRealm</span> <span class="variable">iniRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IniRealm</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        securityManager.setRealm(iniRealm);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line">        <span class="comment">//现在设置了一个简单的Shiro环境，让我们看看您可以做什么：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        <span class="comment">//获取当前正在执行的用户：getSubject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过当前用户拿到Session</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Securit=&gt;Session! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这段if 就是判断当前的用户是否被认证</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//如果认证成功，就拿到账号密码生成一个Token令牌，没有获取，随机生成</span></span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            <span class="comment">//设置记住我</span></span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行了登录操作！</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123; <span class="comment">//未知的账户</span></span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;<span class="comment">//密码不正常，然后输出</span></span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;<span class="comment">//用户被锁定，比如说输入5次失败，锁定账户</span></span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前用户的验证码</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试角色，比如之前的vip1，vip2</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查是否有什么权限，粗粒度！</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果全选不满足就输出</span></span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否拥有更高级权限，细粒度！</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line">        <span class="comment">//结束系统</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动测试</p>
]]></content>
      <categories>
        <category>spring boot系列</category>
      </categories>
  </entry>
</search>
